
HomeGenius.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  000012f2  00001386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008001c0  008001c0  00001446  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ed3  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129a  00000000  00000000  0000464b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ab  00000000  00000000  000058e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  00006f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099e  00000000  00000000  000075c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c3e  00000000  00000000  00007f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00009ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	00 00       	nop
       4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c9 c5       	rjmp	.+2962   	; 0xbbc <__vector_10>
      2a:	00 00       	nop
      2c:	3f c4       	rjmp	.+2174   	; 0x8ac <__vector_11>
      2e:	00 00       	nop
      30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c5       	rjmp	.+2834   	; 0xb4c <__vector_14>
      3a:	00 00       	nop
      3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c6       	rjmp	.+3170   	; 0xcac <__vector_18>
      4a:	00 00       	nop
      4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b0 04       	cpc	r11, r0
      8e:	b2 04       	cpc	r11, r2
      90:	b4 04       	cpc	r11, r4
      92:	b6 04       	cpc	r11, r6
      94:	b8 04       	cpc	r11, r8
      96:	ba 04       	cpc	r11, r10
      98:	bc 04       	cpc	r11, r12
      9a:	be 04       	cpc	r11, r14
      9c:	c0 04       	cpc	r12, r0
      9e:	c2 04       	cpc	r12, r2
      a0:	c4 04       	cpc	r12, r4
      a2:	c6 04       	cpc	r12, r6
      a4:	ca 04       	cpc	r12, r10
      a6:	c8 04       	cpc	r12, r8

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e1       	ldi	r29, 0x10	; 16
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e2 ef       	ldi	r30, 0xF2	; 242
      bc:	f2 e1       	ldi	r31, 0x12	; 18
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 3c       	cpi	r26, 0xC0	; 192
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	a0 ec       	ldi	r26, 0xC0	; 192
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a9 30       	cpi	r26, 0x09	; 9
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	3a d3       	rcall	.+1652   	; 0x754 <main>
      e0:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <_exit>

000000e4 <__bad_interrupt>:
      e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <ADC_Init>:
		3- ADC enable
	*/
void ADC_Init(void){
	
	/* Set ADC CLK prescaler for 50:200 kHz (128) */
	ADC_T ->ADCSRA_BF.ADPS = ADPS_DIV_128;
      e6:	86 b1       	in	r24, 0x06	; 6
      e8:	87 60       	ori	r24, 0x07	; 7
      ea:	86 b9       	out	0x06, r24	; 6
	/* Select ADC Vref (Vcc) */
	ADC_T ->ADMUX_BF.REFS = REFS_AVCC; 
      ec:	87 b1       	in	r24, 0x07	; 7
      ee:	8f 73       	andi	r24, 0x3F	; 63
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	87 b9       	out	0x07, r24	; 7
	/* ADC enable */
	ADC_T ->ADCSRA_BF.ADEN_B =1;
      f4:	37 9a       	sbi	0x06, 7	; 6
      f6:	08 95       	ret

000000f8 <ADC_Read>:
		4- Return data
	*/
INT16U ADC_Read (CH_SEL ch){
		
	/* select the channel*/
	ADC_T->ADMUX_BF.MUX=ch;
      f8:	8f 71       	andi	r24, 0x1F	; 31
      fa:	97 b1       	in	r25, 0x07	; 7
      fc:	90 7e       	andi	r25, 0xE0	; 224
      fe:	89 2b       	or	r24, r25
     100:	87 b9       	out	0x07, r24	; 7
	/* Start conversion */
	ADC_T->ADCSRA_BF.ADSC_B=1;
     102:	36 9a       	sbi	0x06, 6	; 6
	/* wait until completion */
	while(ADC_T->ADCSRA_BF.ADSC_B!=0);
     104:	36 99       	sbic	0x06, 6	; 6
     106:	fe cf       	rjmp	.-4      	; 0x104 <ADC_Read+0xc>
	/* return data */
	return ADC_T->ADC_R;
     108:	84 b1       	in	r24, 0x04	; 4
     10a:	95 b1       	in	r25, 0x05	; 5

}
     10c:	08 95       	ret

0000010e <EEPROM_Init>:
#include "eeprom.h"
#include "twi.h"

void EEPROM_Init(void)
{
	TWI_Init();
     10e:	83 c5       	rjmp	.+2822   	; 0xc16 <TWI_Init>
     110:	08 95       	ret

00000112 <EEPROM_Write>:
}
void EEPROM_Write(uint16 address, uint8 data)
{
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24
     11a:	16 2f       	mov	r17, r22
	TWI_Start();
     11c:	89 d5       	rcall	.+2834   	; 0xc30 <TWI_Start>
	TWI_Write((uint8)(0xa0 | ((address & 0x0700)>>7)));
     11e:	ce 01       	movw	r24, r28
     120:	88 27       	eor	r24, r24
     122:	97 70       	andi	r25, 0x07	; 7
     124:	88 0f       	add	r24, r24
     126:	89 2f       	mov	r24, r25
     128:	88 1f       	adc	r24, r24
     12a:	99 0b       	sbc	r25, r25
     12c:	91 95       	neg	r25
     12e:	80 6a       	ori	r24, 0xA0	; 160
     130:	97 d5       	rcall	.+2862   	; 0xc60 <TWI_Write>
	TWI_Write((uint8)address);
     132:	8c 2f       	mov	r24, r28
     134:	95 d5       	rcall	.+2858   	; 0xc60 <TWI_Write>
	TWI_Write(data);
     136:	81 2f       	mov	r24, r17
     138:	93 d5       	rcall	.+2854   	; 0xc60 <TWI_Write>
     13a:	83 d5       	rcall	.+2822   	; 0xc42 <TWI_Stop>
	TWI_Stop();
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
}
     140:	1f 91       	pop	r17
     142:	08 95       	ret

00000144 <EEPROM_Read>:
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
uint8 EEPROM_Read(uint16 address)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	8c 01       	movw	r16, r24
	TWI_Start();
     14e:	70 d5       	rcall	.+2784   	; 0xc30 <TWI_Start>
	TWI_Write((uint8)((0xa0 | ((address & 0x0700)>>7))));
     150:	e8 01       	movw	r28, r16
     152:	cc 27       	eor	r28, r28
     154:	d7 70       	andi	r29, 0x07	; 7
     156:	cc 0f       	add	r28, r28
     158:	cd 2f       	mov	r28, r29
     15a:	cc 1f       	adc	r28, r28
     15c:	dd 0b       	sbc	r29, r29
     15e:	d1 95       	neg	r29
     160:	8c 2f       	mov	r24, r28
     162:	80 6a       	ori	r24, 0xA0	; 160
     164:	7d d5       	rcall	.+2810   	; 0xc60 <TWI_Write>
	TWI_Write((uint8)address);
     166:	80 2f       	mov	r24, r16
     168:	7b d5       	rcall	.+2806   	; 0xc60 <TWI_Write>
	TWI_Start();
     16a:	62 d5       	rcall	.+2756   	; 0xc30 <TWI_Start>
	TWI_Write((uint8)((0xa0 | ((address & 0x0700)>>7)) | (0x01)));
     16c:	8c 2f       	mov	r24, r28
     16e:	81 6a       	ori	r24, 0xA1	; 161
     170:	77 d5       	rcall	.+2798   	; 0xc60 <TWI_Write>
	uint8 data = TWI_ReadNotAck();
     172:	6b d5       	rcall	.+2774   	; 0xc4a <TWI_ReadNotAck>
     174:	c8 2f       	mov	r28, r24
     176:	65 d5       	rcall	.+2762   	; 0xc42 <TWI_Stop>
	TWI_Stop();
     178:	8c 2f       	mov	r24, r28
     17a:	df 91       	pop	r29
	return data;
     17c:	cf 91       	pop	r28
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	08 95       	ret

00000184 <fireSystem>:
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
}

void fireSystem(void)
{
	uint16 var;
	var=ADC_Read(ADC0);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	b6 df       	rcall	.-148    	; 0xf8 <ADC_Read>
	var/=15;
     18c:	9c 01       	movw	r18, r24
     18e:	a9 e8       	ldi	r26, 0x89	; 137
     190:	b8 e8       	ldi	r27, 0x88	; 136
     192:	c3 d5       	rcall	.+2950   	; 0xd1a <__umulhisi3>
     194:	ec 01       	movw	r28, r24
     196:	d6 95       	lsr	r29
     198:	c7 95       	ror	r28
     19a:	d6 95       	lsr	r29
     19c:	c7 95       	ror	r28
     19e:	d6 95       	lsr	r29
     1a0:	c7 95       	ror	r28
	if (var>=45)
     1a2:	cd 32       	cpi	r28, 0x2D	; 45
     1a4:	d1 05       	cpc	r29, r1
	{
		Timer0_CTCInit();
     1a6:	30 f1       	brcs	.+76     	; 0x1f4 <fireSystem+0x70>
     1a8:	ad d4       	rcall	.+2394   	; 0xb04 <Timer0_CTCInit>
		PORTE^=(1<<PE7);
     1aa:	83 b1       	in	r24, 0x03	; 3
     1ac:	80 58       	subi	r24, 0x80	; 128
     1ae:	83 b9       	out	0x03, r24	; 3
		lcd_DispStrXY(1,15,"FA");
     1b0:	48 e0       	ldi	r20, 0x08	; 8
     1b2:	51 e0       	ldi	r21, 0x01	; 1
     1b4:	6f e0       	ldi	r22, 0x0F	; 15
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	6c d4       	rcall	.+2264   	; 0xa92 <lcd_DispStrXY>
		lcd_DispStrXY(2,13,"T:");
     1ba:	4b e0       	ldi	r20, 0x0B	; 11
     1bc:	51 e0       	ldi	r21, 0x01	; 1
     1be:	6d e0       	ldi	r22, 0x0D	; 13
     1c0:	82 e0       	ldi	r24, 0x02	; 2
		lCD_DispInt(var);
     1c2:	67 d4       	rcall	.+2254   	; 0xa92 <lcd_DispStrXY>
     1c4:	be 01       	movw	r22, r28
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	6c d4       	rcall	.+2264   	; 0xaa4 <lCD_DispInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1cc:	2f ef       	ldi	r18, 0xFF	; 255
     1ce:	81 ee       	ldi	r24, 0xE1	; 225
     1d0:	94 e0       	ldi	r25, 0x04	; 4
     1d2:	21 50       	subi	r18, 0x01	; 1
     1d4:	80 40       	sbci	r24, 0x00	; 0
     1d6:	90 40       	sbci	r25, 0x00	; 0
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <fireSystem+0x4e>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <fireSystem+0x58>
		_delay_ms(200);
		lcd_DispStrXY(1,15,"  ");
     1dc:	00 00       	nop
     1de:	40 e1       	ldi	r20, 0x10	; 16
     1e0:	51 e0       	ldi	r21, 0x01	; 1
     1e2:	6f e0       	ldi	r22, 0x0F	; 15
     1e4:	81 e0       	ldi	r24, 0x01	; 1
		lcd_DispStrXY(2,13,"    ");
     1e6:	55 d4       	rcall	.+2218   	; 0xa92 <lcd_DispStrXY>
     1e8:	4e e0       	ldi	r20, 0x0E	; 14
     1ea:	51 e0       	ldi	r21, 0x01	; 1
     1ec:	6d e0       	ldi	r22, 0x0D	; 13
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	50 d4       	rcall	.+2208   	; 0xa92 <lcd_DispStrXY>
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <fireSystem+0x72>
		//lcd_Clear();
	}
	else
	{
		TCCR0=0;
     1f4:	13 be       	out	0x33, r1	; 51
	}

	
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <uart_test>:
void uart_test(void)
{
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
	uartFlag++;
     200:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uartFlag>
     204:	8f 5f       	subi	r24, 0xFF	; 255
     206:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <uartFlag>
	static uint8 dataStr[10];
	if(g_uartDataReg == '#')
     20a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <g_uartDataReg>
     20e:	83 32       	cpi	r24, 0x23	; 35
     210:	09 f0       	breq	.+2      	; 0x214 <uart_test+0x18>
     212:	a1 c0       	rjmp	.+322    	; 0x356 <uart_test+0x15a>
	{
		uint8 i = 0;
		while(dataStr[i+1]==str1[i])
     214:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <str1>
     218:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <str1+0x1>
     21c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <__data_end+0x1>
     220:	80 81       	ld	r24, Z
     222:	98 13       	cpse	r25, r24
     224:	1b c0       	rjmp	.+54     	; 0x25c <uart_test+0x60>
     226:	80 e0       	ldi	r24, 0x00	; 0
		{
			if(dataStr[6]=='N')
     228:	a0 ec       	ldi	r26, 0xC0	; 192
     22a:	b1 e0       	ldi	r27, 0x01	; 1
     22c:	16 96       	adiw	r26, 0x06	; 6
     22e:	9c 91       	ld	r25, X
     230:	16 97       	sbiw	r26, 0x06	; 6
     232:	9e 34       	cpi	r25, 0x4E	; 78
     234:	09 f4       	brne	.+2      	; 0x238 <uart_test+0x3c>
			{
				setBit(PORTA,0);
     236:	d8 9a       	sbi	0x1b, 0	; 27
			}
			i++;
     238:	8f 5f       	subi	r24, 0xFF	; 255
	uartFlag++;
	static uint8 dataStr[10];
	if(g_uartDataReg == '#')
	{
		uint8 i = 0;
		while(dataStr[i+1]==str1[i])
     23a:	28 2f       	mov	r18, r24
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	f9 01       	movw	r30, r18
     240:	e0 54       	subi	r30, 0x40	; 64
     242:	fe 4f       	sbci	r31, 0xFE	; 254
     244:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <str1>
     248:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <str1+0x1>
     24c:	ea 01       	movw	r28, r20
     24e:	c2 0f       	add	r28, r18
     250:	d3 1f       	adc	r29, r19
     252:	41 81       	ldd	r20, Z+1	; 0x01
     254:	98 81       	ld	r25, Y
     256:	49 17       	cp	r20, r25
     258:	49 f3       	breq	.-46     	; 0x22c <uart_test+0x30>
     25a:	01 c0       	rjmp	.+2      	; 0x25e <uart_test+0x62>
     25c:	80 e0       	ldi	r24, 0x00	; 0
			{
				setBit(PORTA,0);
			}
			i++;
		}
		while(dataStr[i+1]==str2[i])
     25e:	28 2f       	mov	r18, r24
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	f9 01       	movw	r30, r18
     264:	e0 54       	subi	r30, 0x40	; 64
     266:	fe 4f       	sbci	r31, 0xFE	; 254
     268:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <str2>
     26c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <str2+0x1>
     270:	da 01       	movw	r26, r20
     272:	a2 0f       	add	r26, r18
     274:	b3 1f       	adc	r27, r19
     276:	41 81       	ldd	r20, Z+1	; 0x01
     278:	9c 91       	ld	r25, X
     27a:	49 13       	cpse	r20, r25
     27c:	19 c0       	rjmp	.+50     	; 0x2b0 <uart_test+0xb4>
		{
			if(dataStr[7]=='F')
     27e:	a0 ec       	ldi	r26, 0xC0	; 192
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	17 96       	adiw	r26, 0x07	; 7
     284:	9c 91       	ld	r25, X
     286:	17 97       	sbiw	r26, 0x07	; 7
     288:	96 34       	cpi	r25, 0x46	; 70
     28a:	09 f4       	brne	.+2      	; 0x28e <uart_test+0x92>
			{
				clearBit(PORTA,0);
     28c:	d8 98       	cbi	0x1b, 0	; 27
			}
			i++;
     28e:	8f 5f       	subi	r24, 0xFF	; 255
			{
				setBit(PORTA,0);
			}
			i++;
		}
		while(dataStr[i+1]==str2[i])
     290:	28 2f       	mov	r18, r24
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	e0 54       	subi	r30, 0x40	; 64
     298:	fe 4f       	sbci	r31, 0xFE	; 254
     29a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <str2>
     29e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <str2+0x1>
     2a2:	ea 01       	movw	r28, r20
     2a4:	c2 0f       	add	r28, r18
     2a6:	d3 1f       	adc	r29, r19
     2a8:	41 81       	ldd	r20, Z+1	; 0x01
     2aa:	98 81       	ld	r25, Y
     2ac:	49 17       	cp	r20, r25
     2ae:	49 f3       	breq	.-46     	; 0x282 <uart_test+0x86>
			{
				clearBit(PORTA,0);
			}
			i++;
		}
		while(dataStr[i+1]==str3[i])
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	e0 54       	subi	r30, 0x40	; 64
     2b8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ba:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <str3>
     2be:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <str3+0x1>
     2c2:	da 01       	movw	r26, r20
     2c4:	a2 0f       	add	r26, r18
     2c6:	b3 1f       	adc	r27, r19
     2c8:	41 81       	ldd	r20, Z+1	; 0x01
     2ca:	9c 91       	ld	r25, X
     2cc:	49 13       	cpse	r20, r25
     2ce:	19 c0       	rjmp	.+50     	; 0x302 <uart_test+0x106>
		{
			if(dataStr[6]=='N')
     2d0:	a0 ec       	ldi	r26, 0xC0	; 192
     2d2:	b1 e0       	ldi	r27, 0x01	; 1
     2d4:	16 96       	adiw	r26, 0x06	; 6
     2d6:	9c 91       	ld	r25, X
     2d8:	16 97       	sbiw	r26, 0x06	; 6
     2da:	9e 34       	cpi	r25, 0x4E	; 78
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <uart_test+0xe4>
			{
				setBit(PORTA,7);
     2de:	df 9a       	sbi	0x1b, 7	; 27
			}
			i++;
     2e0:	8f 5f       	subi	r24, 0xFF	; 255
			{
				clearBit(PORTA,0);
			}
			i++;
		}
		while(dataStr[i+1]==str3[i])
     2e2:	28 2f       	mov	r18, r24
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	f9 01       	movw	r30, r18
     2e8:	e0 54       	subi	r30, 0x40	; 64
     2ea:	fe 4f       	sbci	r31, 0xFE	; 254
     2ec:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <str3>
     2f0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <str3+0x1>
     2f4:	ea 01       	movw	r28, r20
     2f6:	c2 0f       	add	r28, r18
     2f8:	d3 1f       	adc	r29, r19
     2fa:	41 81       	ldd	r20, Z+1	; 0x01
     2fc:	98 81       	ld	r25, Y
     2fe:	49 17       	cp	r20, r25
     300:	49 f3       	breq	.-46     	; 0x2d4 <uart_test+0xd8>
			{
				setBit(PORTA,7);
			}
			i++;
		}
		while(dataStr[i+1]==str4[i])
     302:	28 2f       	mov	r18, r24
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	e0 54       	subi	r30, 0x40	; 64
     30a:	fe 4f       	sbci	r31, 0xFE	; 254
     30c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     310:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     314:	da 01       	movw	r26, r20
     316:	a2 0f       	add	r26, r18
     318:	b3 1f       	adc	r27, r19
     31a:	41 81       	ldd	r20, Z+1	; 0x01
     31c:	9c 91       	ld	r25, X
     31e:	49 13       	cpse	r20, r25
     320:	25 c0       	rjmp	.+74     	; 0x36c <uart_test+0x170>
		{
			if(dataStr[7]=='F')
     322:	a0 ec       	ldi	r26, 0xC0	; 192
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	17 96       	adiw	r26, 0x07	; 7
     328:	9c 91       	ld	r25, X
     32a:	17 97       	sbiw	r26, 0x07	; 7
     32c:	96 34       	cpi	r25, 0x46	; 70
     32e:	09 f4       	brne	.+2      	; 0x332 <uart_test+0x136>
			{
				clearBit(PORTA,7);
     330:	df 98       	cbi	0x1b, 7	; 27
			}
			i++;
     332:	8f 5f       	subi	r24, 0xFF	; 255
			{
				setBit(PORTA,7);
			}
			i++;
		}
		while(dataStr[i+1]==str4[i])
     334:	28 2f       	mov	r18, r24
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	e0 54       	subi	r30, 0x40	; 64
     33c:	fe 4f       	sbci	r31, 0xFE	; 254
     33e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     342:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     346:	ea 01       	movw	r28, r20
     348:	c2 0f       	add	r28, r18
     34a:	d3 1f       	adc	r29, r19
     34c:	41 81       	ldd	r20, Z+1	; 0x01
     34e:	98 81       	ld	r25, Y
     350:	49 17       	cp	r20, r25
     352:	49 f3       	breq	.-46     	; 0x326 <uart_test+0x12a>
     354:	0b c0       	rjmp	.+22     	; 0x36c <uart_test+0x170>
			}
		}*/
	}
	else
	{
		lcd_DispChar(g_uartDataReg);
     356:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <g_uartDataReg>
     35a:	8b d3       	rcall	.+1814   	; 0xa72 <lcd_DispChar>
		dataStr[uartFlag] = g_uartDataReg;	
     35c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <uartFlag>
     360:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <g_uartDataReg>
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	e0 54       	subi	r30, 0x40	; 64
     368:	fe 4f       	sbci	r31, 0xFE	; 254
     36a:	80 83       	st	Z, r24
	}
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <buzzer_on>:
uint8* str4="@AC,OFF";
uint8 i=0;

void buzzer_on(void)
{
	PORTE|=(1<<7);
     372:	1f 9a       	sbi	0x03, 7	; 3
     374:	2f e7       	ldi	r18, 0x7F	; 127
     376:	88 e3       	ldi	r24, 0x38	; 56
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	21 50       	subi	r18, 0x01	; 1
     37c:	80 40       	sbci	r24, 0x00	; 0
     37e:	90 40       	sbci	r25, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <buzzer_on+0x8>
     382:	00 c0       	rjmp	.+0      	; 0x384 <buzzer_on+0x12>
     384:	00 00       	nop
	_delay_ms(50);
	PORTE&=~(1<<7);
     386:	1f 98       	cbi	0x03, 7	; 3
     388:	08 95       	ret

0000038a <doorAccess>:
	}
}

volatile uint8 g_pass[4];
void doorAccess(void)
{
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
	uint8 flag = 0;
	while(flag==0)
	{
		lcd_Clear();
     390:	49 d3       	rcall	.+1682   	; 0xa24 <lcd_Clear>
		lcd_DispStrXY(1,4,"Door Access");
     392:	43 e1       	ldi	r20, 0x13	; 19
     394:	51 e0       	ldi	r21, 0x01	; 1
     396:	64 e0       	ldi	r22, 0x04	; 4
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	7b d3       	rcall	.+1782   	; 0xa92 <lcd_DispStrXY>
		lcd_DispStrXY(2,1,"Pass:");
     39c:	48 e4       	ldi	r20, 0x48	; 72
     39e:	51 e0       	ldi	r21, 0x01	; 1
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	76 d3       	rcall	.+1772   	; 0xa92 <lcd_DispStrXY>
		uint8 enteredPass[4];
		uint8 i;	
		uint8 enterKey;
		for( i = 0 ; i < 4 ; i++)
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8 flag = 0;
	while(flag==0)
	{
		lcd_Clear();
		lcd_DispStrXY(1,4,"Door Access");
		lcd_DispStrXY(2,1,"Pass:");
     3a8:	10 e0       	ldi	r17, 0x00	; 0
		uint8 enteredPass[4];
		uint8 i;	
		uint8 enterKey;
		for( i = 0 ; i < 4 ; i++)
		{
			enteredPass[i] = Keypad_getPressedKey();
     3aa:	ac d2       	rcall	.+1368   	; 0x904 <Keypad_getPressedKey>
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	84 e3       	ldi	r24, 0x34	; 52
     3b0:	9c e0       	ldi	r25, 0x0C	; 12
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	80 40       	sbci	r24, 0x00	; 0
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <doorAccess+0x28>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <doorAccess+0x32>
			_delay_ms(500);
			enteredPass[i] = Keypad_getPressedKey();
     3bc:	00 00       	nop
     3be:	a2 d2       	rcall	.+1348   	; 0x904 <Keypad_getPressedKey>
     3c0:	c8 2f       	mov	r28, r24
			buzzer_on();
     3c2:	d7 df       	rcall	.-82     	; 0x372 <buzzer_on>
     3c4:	cd 30       	cpi	r28, 0x0D	; 13
			if(enteredPass[i]!=13 && enteredPass[i]!='L' && enteredPass[i]!='C')
     3c6:	41 f1       	breq	.+80     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3c8:	cc 34       	cpi	r28, 0x4C	; 76
     3ca:	81 f0       	breq	.+32     	; 0x3ec <doorAccess+0x62>
     3cc:	c3 34       	cpi	r28, 0x43	; 67
     3ce:	d1 f0       	breq	.+52     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{			
				lCD_DispInt(enteredPass[i]);
     3d0:	6c 2f       	mov	r22, r28
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	65 d3       	rcall	.+1738   	; 0xaa4 <lCD_DispInt>
     3da:	ed 2f       	mov	r30, r29
		uint8 enteredPass[4];
		uint8 i;	
		uint8 enterKey;
		for( i = 0 ; i < 4 ; i++)
		{
			enteredPass[i] = Keypad_getPressedKey();
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ee 52       	subi	r30, 0x2E	; 46
			enteredPass[i] = Keypad_getPressedKey();
			buzzer_on();
			if(enteredPass[i]!=13 && enteredPass[i]!='L' && enteredPass[i]!='C')
			{			
				lCD_DispInt(enteredPass[i]);
				if(g_pass[i] == enteredPass[i])
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	80 81       	ld	r24, Z
     3e4:	c8 13       	cpse	r28, r24
     3e6:	18 c0       	rjmp	.+48     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				{
					flag++;
     3e8:	1f 5f       	subi	r17, 0xFF	; 255
     3ea:	16 c0       	rjmp	.+44     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				}
			}
			else if(enteredPass[i]=='L')
			{
				i=-1;
				lcd_DispStrXY(2,6,"    ");
     3ec:	4e e0       	ldi	r20, 0x0E	; 14
     3ee:	51 e0       	ldi	r21, 0x01	; 1
     3f0:	66 e0       	ldi	r22, 0x06	; 6
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	4e d3       	rcall	.+1692   	; 0xa92 <lcd_DispStrXY>
				lcd_Gotoxy(2,6);
     3f6:	66 e0       	ldi	r22, 0x06	; 6
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	08 d3       	rcall	.+1552   	; 0xa10 <lcd_Gotoxy>
     400:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_DispStrXY(1,4,"Door Access");
		lcd_DispStrXY(2,1,"Pass:");
		uint8 enteredPass[4];
		uint8 i;	
		uint8 enterKey;
		for( i = 0 ; i < 4 ; i++)
     402:	d3 cf       	rjmp	.-90     	; 0x3aa <doorAccess+0x20>
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	82 e5       	ldi	r24, 0x52	; 82
     408:	97 e0       	ldi	r25, 0x07	; 7
     40a:	21 50       	subi	r18, 0x01	; 1
     40c:	80 40       	sbci	r24, 0x00	; 0
     40e:	90 40       	sbci	r25, 0x00	; 0
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     414:	00 00       	nop
     416:	74 c0       	rjmp	.+232    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     418:	df 5f       	subi	r29, 0xFF	; 255
     41a:	d4 30       	cpi	r29, 0x04	; 4
     41c:	08 f4       	brcc	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	c5 cf       	rjmp	.-118    	; 0x3aa <doorAccess+0x20>
			
		}
		
		while(1)
		{			
			enterKey = Keypad_getPressedKey();
     420:	71 d2       	rcall	.+1250   	; 0x904 <Keypad_getPressedKey>
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	82 e5       	ldi	r24, 0x52	; 82
     426:	97 e0       	ldi	r25, 0x07	; 7
     428:	21 50       	subi	r18, 0x01	; 1
     42a:	80 40       	sbci	r24, 0x00	; 0
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			_delay_ms(300);
			enterKey = Keypad_getPressedKey();
     430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     432:	00 00       	nop
     434:	67 d2       	rcall	.+1230   	; 0x904 <Keypad_getPressedKey>
			buzzer_on();
     436:	c8 2f       	mov	r28, r24
			if(enterKey == 13)
     438:	9c df       	rcall	.-200    	; 0x372 <buzzer_on>
     43a:	cd 30       	cpi	r28, 0x0D	; 13
     43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			{
				if(flag != 4)
     43e:	51 c0       	rjmp	.+162    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
				{
					lcd_Clear();
     440:	14 30       	cpi	r17, 0x04	; 4
     442:	a9 f0       	breq	.+42     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
					lcd_DispStrXY(1,4,"Door Access");
     444:	ef d2       	rcall	.+1502   	; 0xa24 <lcd_Clear>
     446:	43 e1       	ldi	r20, 0x13	; 19
     448:	51 e0       	ldi	r21, 0x01	; 1
     44a:	64 e0       	ldi	r22, 0x04	; 4
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	21 d3       	rcall	.+1602   	; 0xa92 <lcd_DispStrXY>
					lcd_DispStrXY(2,1,"Wrong Password");
     450:	4f e1       	ldi	r20, 0x1F	; 31
     452:	51 e0       	ldi	r21, 0x01	; 1
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	1c d3       	rcall	.+1592   	; 0xa92 <lcd_DispStrXY>
     45a:	2f ef       	ldi	r18, 0xFF	; 255
     45c:	83 ed       	ldi	r24, 0xD3	; 211
     45e:	90 e3       	ldi	r25, 0x30	; 48
     460:	21 50       	subi	r18, 0x01	; 1
     462:	80 40       	sbci	r24, 0x00	; 0
     464:	90 40       	sbci	r25, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
					_delay_ms(2000);
					flag = 0;
				}
			else
			{
				lcd_Clear();
     46a:	00 00       	nop
     46c:	91 cf       	rjmp	.-222    	; 0x390 <doorAccess+0x6>
				lcd_DispStrXY(1,4,"Door Access");
     46e:	da d2       	rcall	.+1460   	; 0xa24 <lcd_Clear>
     470:	43 e1       	ldi	r20, 0x13	; 19
     472:	51 e0       	ldi	r21, 0x01	; 1
     474:	64 e0       	ldi	r22, 0x04	; 4
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0c d3       	rcall	.+1560   	; 0xa92 <lcd_DispStrXY>
				lcd_DispStrXY(2,1,"Guaranteed");
     47a:	4e e2       	ldi	r20, 0x2E	; 46
     47c:	51 e0       	ldi	r21, 0x01	; 1
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	07 d3       	rcall	.+1550   	; 0xa92 <lcd_DispStrXY>
     484:	2f ef       	ldi	r18, 0xFF	; 255
     486:	83 ed       	ldi	r24, 0xD3	; 211
     488:	90 e3       	ldi	r25, 0x30	; 48
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	80 40       	sbci	r24, 0x00	; 0
     48e:	90 40       	sbci	r25, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	
		/*open the door*/
		if(flag==4)
		{
		
		DDRE|=(1<<PE3);
     494:	00 00       	nop
		Timer3_PWMInit(187);
     496:	13 9a       	sbi	0x02, 3	; 2
     498:	8b eb       	ldi	r24, 0xBB	; 187
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	3d d3       	rcall	.+1658   	; 0xb18 <Timer3_PWMInit>
     49e:	2f ef       	ldi	r18, 0xFF	; 255
     4a0:	83 ed       	ldi	r24, 0xD3	; 211
     4a2:	90 e3       	ldi	r25, 0x30	; 48
     4a4:	21 50       	subi	r18, 0x01	; 1
     4a6:	80 40       	sbci	r24, 0x00	; 0
     4a8:	90 40       	sbci	r25, 0x00	; 0
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		_delay_ms(2000);
		Timer3_PWMInit(250);
     4ae:	00 00       	nop
     4b0:	8a ef       	ldi	r24, 0xFA	; 250
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	31 d3       	rcall	.+1634   	; 0xb18 <Timer3_PWMInit>
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	83 ed       	ldi	r24, 0xD3	; 211
     4ba:	90 e3       	ldi	r25, 0x30	; 48
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c6:	00 00       	nop
		_delay_ms(2000);
		Timer3_PWMInit(124);
     4c8:	8c e7       	ldi	r24, 0x7C	; 124
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	25 d3       	rcall	.+1610   	; 0xb18 <Timer3_PWMInit>
     4ce:	2f ef       	ldi	r18, 0xFF	; 255
     4d0:	83 ed       	ldi	r24, 0xD3	; 211
     4d2:	90 e3       	ldi	r25, 0x30	; 48
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	80 40       	sbci	r24, 0x00	; 0
     4d8:	90 40       	sbci	r25, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4de:	00 00       	nop
     4e0:	0f c0       	rjmp	.+30     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4e2:	cc 34       	cpi	r28, 0x4C	; 76
				lcd_DispStrXY(2,1,"Guaranteed");
				_delay_ms(2000);
			}
			break;
		}
		else if (enterKey=='L')
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	54 cf       	rjmp	.-344    	; 0x390 <doorAccess+0x6>
     4e8:	c3 34       	cpi	r28, 0x43	; 67
		{
			flag=0;
			break;
		}
		else if (enterKey=='C')
     4ea:	09 f0       	breq	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	99 cf       	rjmp	.-206    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     4ee:	2f ef       	ldi	r18, 0xFF	; 255
     4f0:	82 e5       	ldi	r24, 0x52	; 82
     4f2:	97 e0       	ldi	r25, 0x07	; 7
     4f4:	21 50       	subi	r18, 0x01	; 1
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	90 40       	sbci	r25, 0x00	; 0
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fe:	00 00       	nop
     500:	df 91       	pop	r29
		_delay_ms(2000);
		Timer3_PWMInit(124);
		_delay_ms(2000);
		}
	}
}
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	08 95       	ret

00000508 <changePass>:
     508:	ef 92       	push	r14
void changePass(void)
{
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <changePass+0xe>
     516:	00 d0       	rcall	.+0      	; 0x518 <changePass+0x10>
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	uint8 l_pass[4];
	uint8 enterKey;
	uint8 i;
	while(flag==0)
	{
		lcd_Clear();
     51c:	83 d2       	rcall	.+1286   	; 0xa24 <lcd_Clear>
		lcd_DispStrXY(1,2,"Change Pass");
     51e:	49 e3       	ldi	r20, 0x39	; 57
     520:	51 e0       	ldi	r21, 0x01	; 1
     522:	62 e0       	ldi	r22, 0x02	; 2
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	b5 d2       	rcall	.+1386   	; 0xa92 <lcd_DispStrXY>
		lcd_DispStrXY(2,1,"OldPass:");
     528:	45 e4       	ldi	r20, 0x45	; 69
     52a:	51 e0       	ldi	r21, 0x01	; 1
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	b0 d2       	rcall	.+1376   	; 0xa92 <lcd_DispStrXY>
		
		
			
		for(i = 0 ; i < 4 ; i++)
     532:	00 e0       	ldi	r16, 0x00	; 0
	uint8 i;
	while(flag==0)
	{
		lcd_Clear();
		lcd_DispStrXY(1,2,"Change Pass");
		lcd_DispStrXY(2,1,"OldPass:");
     534:	f1 2c       	mov	r15, r1
		
		
			
		for(i = 0 ; i < 4 ; i++)
		{
			enteredPass[i] = Keypad_getPressedKey();
     536:	e6 d1       	rcall	.+972    	; 0x904 <Keypad_getPressedKey>
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	84 e3       	ldi	r24, 0x34	; 52
     53c:	9c e0       	ldi	r25, 0x0C	; 12
     53e:	21 50       	subi	r18, 0x01	; 1
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <changePass+0x36>
     546:	00 c0       	rjmp	.+0      	; 0x548 <changePass+0x40>
			_delay_ms(500);
			enteredPass[i] = Keypad_getPressedKey();
     548:	00 00       	nop
     54a:	dc d1       	rcall	.+952    	; 0x904 <Keypad_getPressedKey>
     54c:	18 2f       	mov	r17, r24
			buzzer_on();
     54e:	11 df       	rcall	.-478    	; 0x372 <buzzer_on>
     550:	1d 30       	cpi	r17, 0x0D	; 13
			if(enteredPass[i]!=13 && enteredPass[i]!='L' && enteredPass[i]!='C')
     552:	41 f1       	breq	.+80     	; 0x5a4 <changePass+0x9c>
     554:	1c 34       	cpi	r17, 0x4C	; 76
     556:	81 f0       	breq	.+32     	; 0x578 <changePass+0x70>
     558:	13 34       	cpi	r17, 0x43	; 67
     55a:	d1 f0       	breq	.+52     	; 0x590 <changePass+0x88>
			{
				lCD_DispInt(enteredPass[i]);
     55c:	61 2f       	mov	r22, r17
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9f d2       	rcall	.+1342   	; 0xaa4 <lCD_DispInt>
     566:	e0 2f       	mov	r30, r16
		
		
			
		for(i = 0 ; i < 4 ; i++)
		{
			enteredPass[i] = Keypad_getPressedKey();
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ee 52       	subi	r30, 0x2E	; 46
			enteredPass[i] = Keypad_getPressedKey();
			buzzer_on();
			if(enteredPass[i]!=13 && enteredPass[i]!='L' && enteredPass[i]!='C')
			{
				lCD_DispInt(enteredPass[i]);
				if(g_pass[i] == enteredPass[i])
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	80 81       	ld	r24, Z
     570:	18 13       	cpse	r17, r24
     572:	18 c0       	rjmp	.+48     	; 0x5a4 <changePass+0x9c>
				{
					flag++;
     574:	f3 94       	inc	r15
     576:	16 c0       	rjmp	.+44     	; 0x5a4 <changePass+0x9c>
				}
			}
			else if(enteredPass[i]=='L')
			{
				i=-1;
				lcd_DispStrXY(2,9,"    ");
     578:	4e e0       	ldi	r20, 0x0E	; 14
     57a:	51 e0       	ldi	r21, 0x01	; 1
     57c:	69 e0       	ldi	r22, 0x09	; 9
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	88 d2       	rcall	.+1296   	; 0xa92 <lcd_DispStrXY>
				lcd_Gotoxy(2,9);
     582:	69 e0       	ldi	r22, 0x09	; 9
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	42 d2       	rcall	.+1156   	; 0xa10 <lcd_Gotoxy>
     58c:	00 e0       	ldi	r16, 0x00	; 0
		lcd_DispStrXY(1,2,"Change Pass");
		lcd_DispStrXY(2,1,"OldPass:");
		
		
			
		for(i = 0 ; i < 4 ; i++)
     58e:	d3 cf       	rjmp	.-90     	; 0x536 <changePass+0x2e>
     590:	ef ef       	ldi	r30, 0xFF	; 255
     592:	f2 e5       	ldi	r31, 0x52	; 82
     594:	27 e0       	ldi	r18, 0x07	; 7
     596:	e1 50       	subi	r30, 0x01	; 1
     598:	f0 40       	sbci	r31, 0x00	; 0
     59a:	20 40       	sbci	r18, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <changePass+0x8e>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <changePass+0x98>
     5a0:	00 00       	nop
     5a2:	cd c0       	rjmp	.+410    	; 0x73e <changePass+0x236>
     5a4:	0f 5f       	subi	r16, 0xFF	; 255
     5a6:	04 30       	cpi	r16, 0x04	; 4
     5a8:	08 f4       	brcc	.+2      	; 0x5ac <changePass+0xa4>
     5aa:	c5 cf       	rjmp	.-118    	; 0x536 <changePass+0x2e>
			}
			
		}
		while (1)
		{
			enterKey = Keypad_getPressedKey();
     5ac:	ab d1       	rcall	.+854    	; 0x904 <Keypad_getPressedKey>
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	92 e5       	ldi	r25, 0x52	; 82
     5b2:	e7 e0       	ldi	r30, 0x07	; 7
     5b4:	81 50       	subi	r24, 0x01	; 1
     5b6:	90 40       	sbci	r25, 0x00	; 0
     5b8:	e0 40       	sbci	r30, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <changePass+0xac>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <changePass+0xb6>
			_delay_ms(300);
			enterKey = Keypad_getPressedKey();
     5be:	00 00       	nop
     5c0:	a1 d1       	rcall	.+834    	; 0x904 <Keypad_getPressedKey>
			buzzer_on();
     5c2:	18 2f       	mov	r17, r24
     5c4:	d6 de       	rcall	.-596    	; 0x372 <buzzer_on>
			if(enterKey == 13)
     5c6:	1d 30       	cpi	r17, 0x0D	; 13
     5c8:	09 f0       	breq	.+2      	; 0x5cc <changePass+0xc4>
			{
				if(flag != 4)
     5ca:	aa c0       	rjmp	.+340    	; 0x720 <changePass+0x218>
     5cc:	f4 e0       	ldi	r31, 0x04	; 4
     5ce:	ff 16       	cp	r15, r31
				{
					lcd_Clear();
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <changePass+0xcc>
     5d2:	99 c0       	rjmp	.+306    	; 0x706 <changePass+0x1fe>
					lcd_DispStrXY(1,2,"Change Pass");
     5d4:	27 d2       	rcall	.+1102   	; 0xa24 <lcd_Clear>
     5d6:	49 e3       	ldi	r20, 0x39	; 57
     5d8:	51 e0       	ldi	r21, 0x01	; 1
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	59 d2       	rcall	.+1202   	; 0xa92 <lcd_DispStrXY>
					lcd_DispStrXY(2,1,"Wrong Pass");
     5e0:	4e e4       	ldi	r20, 0x4E	; 78
     5e2:	51 e0       	ldi	r21, 0x01	; 1
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	54 d2       	rcall	.+1192   	; 0xa92 <lcd_DispStrXY>
     5ea:	2f ef       	ldi	r18, 0xFF	; 255
     5ec:	83 ed       	ldi	r24, 0xD3	; 211
     5ee:	90 e3       	ldi	r25, 0x30	; 48
     5f0:	21 50       	subi	r18, 0x01	; 1
     5f2:	80 40       	sbci	r24, 0x00	; 0
     5f4:	90 40       	sbci	r25, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <changePass+0xe8>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <changePass+0xf2>
     5fa:	00 00       	nop
					lcd_Clear();
					lcd_DispStrXY(1,2,"Change Pass");
					lcd_DispStrXY(2,1,"NewPass:");
					for( i = 0 ; i < 4 ; i++)
					{
						l_pass[i] = Keypad_getPressedKey();
     5fc:	8f cf       	rjmp	.-226    	; 0x51c <changePass+0x14>
     5fe:	82 d1       	rcall	.+772    	; 0x904 <Keypad_getPressedKey>
     600:	ef ef       	ldi	r30, 0xFF	; 255
     602:	f4 e3       	ldi	r31, 0x34	; 52
     604:	2c e0       	ldi	r18, 0x0C	; 12
     606:	e1 50       	subi	r30, 0x01	; 1
     608:	f0 40       	sbci	r31, 0x00	; 0
     60a:	20 40       	sbci	r18, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <changePass+0xfe>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <changePass+0x108>
						_delay_ms(500);
						l_pass[i] = Keypad_getPressedKey();
     610:	00 00       	nop
     612:	78 d1       	rcall	.+752    	; 0x904 <Keypad_getPressedKey>
     614:	18 2f       	mov	r17, r24
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	ec 0f       	add	r30, r28
     61c:	fd 1f       	adc	r31, r29
     61e:	e0 0f       	add	r30, r16
     620:	f1 1d       	adc	r31, r1
						buzzer_on();
     622:	80 83       	st	Z, r24
						if(l_pass[i]!=13 && l_pass[i]!='L' && l_pass[i]!='C')
     624:	a6 de       	rcall	.-692    	; 0x372 <buzzer_on>
     626:	1d 30       	cpi	r17, 0x0D	; 13
     628:	01 f1       	breq	.+64     	; 0x66a <changePass+0x162>
     62a:	1c 34       	cpi	r17, 0x4C	; 76
     62c:	41 f0       	breq	.+16     	; 0x63e <changePass+0x136>
						{
							lCD_DispInt(l_pass[i]);
     62e:	13 34       	cpi	r17, 0x43	; 67
     630:	91 f0       	breq	.+36     	; 0x656 <changePass+0x14e>
     632:	61 2f       	mov	r22, r17
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	34 d2       	rcall	.+1128   	; 0xaa4 <lCD_DispInt>
						}
						else if(l_pass[i]=='L')
						{
							i=-1;
							lcd_DispStrXY(2,9,"    ");
     63c:	16 c0       	rjmp	.+44     	; 0x66a <changePass+0x162>
     63e:	4e e0       	ldi	r20, 0x0E	; 14
     640:	51 e0       	ldi	r21, 0x01	; 1
     642:	69 e0       	ldi	r22, 0x09	; 9
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	25 d2       	rcall	.+1098   	; 0xa92 <lcd_DispStrXY>
							lcd_Gotoxy(2,9);
     648:	69 e0       	ldi	r22, 0x09	; 9
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	df d1       	rcall	.+958    	; 0xa10 <lcd_Gotoxy>
					{
						
					lcd_Clear();
					lcd_DispStrXY(1,2,"Change Pass");
					lcd_DispStrXY(2,1,"NewPass:");
					for( i = 0 ; i < 4 ; i++)
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	d4 cf       	rjmp	.-88     	; 0x5fe <changePass+0xf6>
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	92 e5       	ldi	r25, 0x52	; 82
     65a:	e7 e0       	ldi	r30, 0x07	; 7
     65c:	81 50       	subi	r24, 0x01	; 1
     65e:	90 40       	sbci	r25, 0x00	; 0
     660:	e0 40       	sbci	r30, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <changePass+0x154>
     664:	00 c0       	rjmp	.+0      	; 0x666 <changePass+0x15e>
     666:	00 00       	nop
     668:	6a c0       	rjmp	.+212    	; 0x73e <changePass+0x236>
     66a:	0f 5f       	subi	r16, 0xFF	; 255
					}
					uint8 flag2=1;
				
					while (flag2==1)
					{
						enterKey = Keypad_getPressedKey();
     66c:	04 30       	cpi	r16, 0x04	; 4
     66e:	38 f2       	brcs	.-114    	; 0x5fe <changePass+0xf6>
     670:	49 d1       	rcall	.+658    	; 0x904 <Keypad_getPressedKey>
     672:	ff ef       	ldi	r31, 0xFF	; 255
     674:	22 e5       	ldi	r18, 0x52	; 82
     676:	87 e0       	ldi	r24, 0x07	; 7
     678:	f1 50       	subi	r31, 0x01	; 1
     67a:	20 40       	sbci	r18, 0x00	; 0
     67c:	80 40       	sbci	r24, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <changePass+0x170>
						_delay_ms(300);
						enterKey = Keypad_getPressedKey();
     680:	00 c0       	rjmp	.+0      	; 0x682 <changePass+0x17a>
     682:	00 00       	nop
     684:	3f d1       	rcall	.+638    	; 0x904 <Keypad_getPressedKey>
						buzzer_on();
     686:	18 2f       	mov	r17, r24
     688:	74 de       	rcall	.-792    	; 0x372 <buzzer_on>
						if (enterKey == 13)
     68a:	1d 30       	cpi	r17, 0x0D	; 13
     68c:	69 f5       	brne	.+90     	; 0x6e8 <changePass+0x1e0>
     68e:	fe 01       	movw	r30, r28
     690:	31 96       	adiw	r30, 0x01	; 1
     692:	7f 01       	movw	r14, r30
     694:	00 e3       	ldi	r16, 0x30	; 48
						{
							for(i=0;i<4;i++)
							{
								EEPROM_Write(0x0030+i,l_pass[i]);
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	f7 01       	movw	r30, r14
     69a:	61 91       	ld	r22, Z+
     69c:	7f 01       	movw	r14, r30
     69e:	c8 01       	movw	r24, r16
     6a0:	38 dd       	rcall	.-1424   	; 0x112 <EEPROM_Write>
     6a2:	ff ef       	ldi	r31, 0xFF	; 255
     6a4:	20 e7       	ldi	r18, 0x70	; 112
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	f1 50       	subi	r31, 0x01	; 1
     6aa:	20 40       	sbci	r18, 0x00	; 0
     6ac:	80 40       	sbci	r24, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <changePass+0x1a0>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <changePass+0x1aa>
     6b2:	00 00       	nop
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
						_delay_ms(300);
						enterKey = Keypad_getPressedKey();
						buzzer_on();
						if (enterKey == 13)
						{
							for(i=0;i<4;i++)
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	04 33       	cpi	r16, 0x34	; 52
     6ba:	11 05       	cpc	r17, r1
							{
								EEPROM_Write(0x0030+i,l_pass[i]);
								_delay_ms(100);
							}
							lcd_Clear();
     6bc:	69 f7       	brne	.-38     	; 0x698 <changePass+0x190>
     6be:	b2 d1       	rcall	.+868    	; 0xa24 <lcd_Clear>
							lcd_DispStrXY(1,2,"Change Pass");
     6c0:	49 e3       	ldi	r20, 0x39	; 57
     6c2:	51 e0       	ldi	r21, 0x01	; 1
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	e4 d1       	rcall	.+968    	; 0xa92 <lcd_DispStrXY>
     6ca:	49 e5       	ldi	r20, 0x59	; 89
							lcd_DispStrXY(2,1,"Success");
     6cc:	51 e0       	ldi	r21, 0x01	; 1
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	df d1       	rcall	.+958    	; 0xa92 <lcd_DispStrXY>
     6d4:	9f ef       	ldi	r25, 0xFF	; 255
     6d6:	e3 ed       	ldi	r30, 0xD3	; 211
     6d8:	f0 e3       	ldi	r31, 0x30	; 48
     6da:	91 50       	subi	r25, 0x01	; 1
     6dc:	e0 40       	sbci	r30, 0x00	; 0
     6de:	f0 40       	sbci	r31, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <changePass+0x1d2>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <changePass+0x1dc>
     6e4:	00 00       	nop
							_delay_ms(2000);
							flag2=0;
							flag3=0;
							flag=1;
						}
						else if (enterKey=='L')
     6e6:	2b c0       	rjmp	.+86     	; 0x73e <changePass+0x236>
     6e8:	1c 34       	cpi	r17, 0x4C	; 76
							flag2=0;
							flag3=1;
							flag=0;
							break;
						}
						else if (enterKey=='C')
     6ea:	69 f0       	breq	.+26     	; 0x706 <changePass+0x1fe>
     6ec:	13 34       	cpi	r17, 0x43	; 67
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <changePass+0x1ea>
     6f0:	bf cf       	rjmp	.-130    	; 0x670 <changePass+0x168>
     6f2:	2f ef       	ldi	r18, 0xFF	; 255
     6f4:	82 e5       	ldi	r24, 0x52	; 82
     6f6:	97 e0       	ldi	r25, 0x07	; 7
     6f8:	21 50       	subi	r18, 0x01	; 1
     6fa:	80 40       	sbci	r24, 0x00	; 0
     6fc:	90 40       	sbci	r25, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <changePass+0x1f0>
     700:	00 c0       	rjmp	.+0      	; 0x702 <changePass+0x1fa>
     702:	00 00       	nop
				{
					uint8 flag3=1;
					while(flag3==1)
					{
						
					lcd_Clear();
     704:	1c c0       	rjmp	.+56     	; 0x73e <changePass+0x236>
     706:	8e d1       	rcall	.+796    	; 0xa24 <lcd_Clear>
					lcd_DispStrXY(1,2,"Change Pass");
     708:	49 e3       	ldi	r20, 0x39	; 57
     70a:	51 e0       	ldi	r21, 0x01	; 1
     70c:	62 e0       	ldi	r22, 0x02	; 2
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	c0 d1       	rcall	.+896    	; 0xa92 <lcd_DispStrXY>
     712:	41 e6       	ldi	r20, 0x61	; 97
					lcd_DispStrXY(2,1,"NewPass:");
     714:	51 e0       	ldi	r21, 0x01	; 1
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	bb d1       	rcall	.+886    	; 0xa92 <lcd_DispStrXY>
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	6f cf       	rjmp	.-290    	; 0x5fe <changePass+0xf6>
					for( i = 0 ; i < 4 ; i++)
     720:	1c 34       	cpi	r17, 0x4C	; 76
     722:	09 f4       	brne	.+2      	; 0x726 <changePass+0x21e>
					} 
				
				}
				break;
			}
			else if (enterKey=='L')
     724:	fb ce       	rjmp	.-522    	; 0x51c <changePass+0x14>
     726:	13 34       	cpi	r17, 0x43	; 67
     728:	09 f0       	breq	.+2      	; 0x72c <changePass+0x224>
			{
				flag=0;
				break;
			}
			else if (enterKey=='C')
     72a:	40 cf       	rjmp	.-384    	; 0x5ac <changePass+0xa4>
     72c:	ef ef       	ldi	r30, 0xFF	; 255
     72e:	f2 e5       	ldi	r31, 0x52	; 82
     730:	27 e0       	ldi	r18, 0x07	; 7
     732:	e1 50       	subi	r30, 0x01	; 1
     734:	f0 40       	sbci	r31, 0x00	; 0
     736:	20 40       	sbci	r18, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <changePass+0x22a>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <changePass+0x234>
     73c:	00 00       	nop
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
				return;
			}
		
		}
	}
}
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	08 95       	ret

00000754 <main>:
     754:	78 94       	sei
     756:	db dc       	rcall	.-1610   	; 0x10e <EEPROM_Init>
int main()
{
	/*Enable global interrupt */
	sei();
	EEPROM_Init();
	ICU_Init();
     758:	9f d0       	rcall	.+318    	; 0x898 <ICU_Init>
     75a:	8e ef       	ldi	r24, 0xFE	; 254
	
	uart_setCallback(uart_test);
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a1 d2       	rcall	.+1346   	; 0xca2 <uart_setCallback>
	UART_Init();
     760:	8a d2       	rcall	.+1300   	; 0xc76 <UART_Init>
     762:	cc d1       	rcall	.+920    	; 0xafc <UART_Receiver_Int_Enable>
	UART_Receiver_Int_Enable();
     764:	81 e8       	ldi	r24, 0x81	; 129
     766:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0x81;
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	81 ee       	ldi	r24, 0xE1	; 225
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <main+0x1a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x24>
     778:	00 00       	nop
	
	
	_delay_ms(200);
	
	
	ADC_Init();
     77a:	b5 dc       	rcall	.-1686   	; 0xe6 <ADC_Init>
     77c:	82 ec       	ldi	r24, 0xC2	; 194
	
	setCallback(fireSystem);
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	e0 d1       	rcall	.+960    	; 0xb42 <setCallback>
     782:	14 d2       	rcall	.+1064   	; 0xbac <Timer2_OVFInit>
     784:	e1 e6       	ldi	r30, 0x61	; 97
	Timer2_OVFInit();
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
	
	
	DDRF|=(1<<PF3);
     78a:	88 60       	ori	r24, 0x08	; 8
     78c:	80 83       	st	Z, r24
     78e:	e2 e6       	ldi	r30, 0x62	; 98
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
	PORTF|=(1<<PF3);
     794:	88 60       	ori	r24, 0x08	; 8
     796:	80 83       	st	Z, r24
     798:	17 9a       	sbi	0x02, 7	; 2
     79a:	bc 9a       	sbi	0x17, 4	; 23


	
	 
	/*Buzzer direction */
	DDRE|=(1<<7);
     79c:	00 e0       	ldi	r16, 0x00	; 0
	/*Led direction */
	DDRB|=(1<<PB4);
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	c8 01       	movw	r24, r16
     7a2:	c0 96       	adiw	r24, 0x30	; 48
	
	
	
	for(uint8 i = 0 ; i < 4 ; i++)
	{
		g_pass[i]=EEPROM_Read(0x30+i);
     7a4:	cf dc       	rcall	.-1634   	; 0x144 <EEPROM_Read>
     7a6:	f8 01       	movw	r30, r16
     7a8:	ee 52       	subi	r30, 0x2E	; 46
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	80 83       	st	Z, r24
     7ae:	ef ef       	ldi	r30, 0xFF	; 255
     7b0:	f0 e7       	ldi	r31, 0x70	; 112
     7b2:	22 e0       	ldi	r18, 0x02	; 2
     7b4:	e1 50       	subi	r30, 0x01	; 1
     7b6:	f0 40       	sbci	r31, 0x00	; 0
     7b8:	20 40       	sbci	r18, 0x00	; 0
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <main+0x60>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x6a>
     7be:	00 00       	nop
     7c0:	0f 5f       	subi	r16, 0xFF	; 255
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	04 30       	cpi	r16, 0x04	; 4
     7c6:	11 05       	cpc	r17, r1
     7c8:	59 f7       	brne	.-42     	; 0x7a0 <main+0x4c>
	}
	*/
	
	
	
	for(uint8 i = 0 ; i < 4 ; i++)
     7ca:	8d 9a       	sbi	0x11, 5	; 17
     7cc:	95 9a       	sbi	0x12, 5	; 18
     7ce:	8a e1       	ldi	r24, 0x1A	; 26
	}
	
	
	
	
	DDRD|=(1<<PD5);
     7d0:	8a 95       	dec	r24
	uint16 check_distance;
	while(1)
	{
		PORTD|= (1<<PD5);
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x82>
     7d6:	95 98       	cbi	0x12, 5	; 18
     7d8:	9f ef       	ldi	r25, 0xFF	; 255
     7da:	e9 e6       	ldi	r30, 0x69	; 105
		_delay_us(10);
		PORTD&=~(1<<PD5);
     7dc:	f8 e1       	ldi	r31, 0x18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7de:	91 50       	subi	r25, 0x01	; 1
     7e0:	e0 40       	sbci	r30, 0x00	; 0
     7e2:	f0 40       	sbci	r31, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <main+0x8a>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <main+0x94>
     7e8:	00 00       	nop
     7ea:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <distance>
		_delay_ms(1000);
		check_distance=((distance/58)+1);
     7ee:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <distance+0x1>
     7f2:	af e9       	ldi	r26, 0x9F	; 159
     7f4:	b6 e4       	ldi	r27, 0x46	; 70
	
		
		while(check_distance <= 40)
     7f6:	91 d2       	rcall	.+1314   	; 0xd1a <__umulhisi3>
     7f8:	92 95       	swap	r25
     7fa:	82 95       	swap	r24
     7fc:	8f 70       	andi	r24, 0x0F	; 15
     7fe:	89 27       	eor	r24, r25
     800:	9f 70       	andi	r25, 0x0F	; 15
     802:	89 27       	eor	r24, r25
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	89 97       	sbiw	r24, 0x29	; 41
     808:	08 f7       	brcc	.-62     	; 0x7cc <main+0x78>
     80a:	02 e6       	ldi	r16, 0x62	; 98
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	f8 01       	movw	r30, r16
		{
			PORTF&=~(1<<PF3);
     810:	80 81       	ld	r24, Z
     812:	87 7f       	andi	r24, 0xF7	; 247
     814:	80 83       	st	Z, r24
     816:	ff ef       	ldi	r31, 0xFF	; 255
     818:	21 ee       	ldi	r18, 0xE1	; 225
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	f1 50       	subi	r31, 0x01	; 1
     81e:	20 40       	sbci	r18, 0x00	; 0
     820:	80 40       	sbci	r24, 0x00	; 0
     822:	e1 f7       	brne	.-8      	; 0x81c <main+0xc8>
     824:	00 c0       	rjmp	.+0      	; 0x826 <main+0xd2>
     826:	00 00       	nop
			_delay_ms(200);
			//Timer1_OVFInit();
			lCD_Init();
     828:	06 d1       	rcall	.+524    	; 0xa36 <lCD_Init>
			lcd_Clear();
     82a:	fc d0       	rcall	.+504    	; 0xa24 <lcd_Clear>
			lcd_DispStrXY(1,4,"HomeGenius");
     82c:	4a e6       	ldi	r20, 0x6A	; 106
     82e:	51 e0       	ldi	r21, 0x01	; 1
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	2e d1       	rcall	.+604    	; 0xa92 <lcd_DispStrXY>
			lcd_DispStrXY(2,1,"1:DA 2:CP");
     836:	45 e7       	ldi	r20, 0x75	; 117
     838:	51 e0       	ldi	r21, 0x01	; 1
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	82 e0       	ldi	r24, 0x02	; 2
			uint8 flag=1;
			while(flag==1)
			{
				lcd_Clear();
     83e:	29 d1       	rcall	.+594    	; 0xa92 <lcd_DispStrXY>
     840:	f1 d0       	rcall	.+482    	; 0xa24 <lcd_Clear>
				lcd_DispStrXY(1,4,"HomeGenius");
     842:	4a e6       	ldi	r20, 0x6A	; 106
     844:	51 e0       	ldi	r21, 0x01	; 1
     846:	64 e0       	ldi	r22, 0x04	; 4
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	23 d1       	rcall	.+582    	; 0xa92 <lcd_DispStrXY>
				lcd_DispStrXY(2,1,"1:DA 2:CP");
     84c:	45 e7       	ldi	r20, 0x75	; 117
     84e:	51 e0       	ldi	r21, 0x01	; 1
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	1e d1       	rcall	.+572    	; 0xa92 <lcd_DispStrXY>
				flag=0;
				uint8 key = Keypad_getPressedKey();
     856:	56 d0       	rcall	.+172    	; 0x904 <Keypad_getPressedKey>
     858:	c8 2f       	mov	r28, r24
				buzzer_on();
     85a:	8b dd       	rcall	.-1258   	; 0x372 <buzzer_on>
     85c:	c1 30       	cpi	r28, 0x01	; 1
				switch(key)
     85e:	19 f0       	breq	.+6      	; 0x866 <main+0x112>
     860:	c2 30       	cpi	r28, 0x02	; 2
     862:	19 f0       	breq	.+6      	; 0x86a <main+0x116>
     864:	04 c0       	rjmp	.+8      	; 0x86e <main+0x11a>
				{
					case 1:
					doorAccess();
     866:	91 dd       	rcall	.-1246   	; 0x38a <doorAccess>
     868:	d2 cf       	rjmp	.-92     	; 0x80e <main+0xba>
					break;
     86a:	4e de       	rcall	.-868    	; 0x508 <changePass>
					case 2:
					changePass();
     86c:	d0 cf       	rjmp	.-96     	; 0x80e <main+0xba>
     86e:	da d0       	rcall	.+436    	; 0xa24 <lcd_Clear>
					break;
     870:	4f e7       	ldi	r20, 0x7F	; 127
					default:
					lcd_Clear();
     872:	51 e0       	ldi	r21, 0x01	; 1
     874:	62 e0       	ldi	r22, 0x02	; 2
					lcd_DispStrXY(1,2,"invalid input");
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0c d1       	rcall	.+536    	; 0xa92 <lcd_DispStrXY>
     87a:	4d e8       	ldi	r20, 0x8D	; 141
     87c:	51 e0       	ldi	r21, 0x01	; 1
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	82 e0       	ldi	r24, 0x02	; 2
					lcd_DispStrXY(2,1,"Please try again");
     882:	07 d1       	rcall	.+526    	; 0xa92 <lcd_DispStrXY>
     884:	9f ef       	ldi	r25, 0xFF	; 255
     886:	e3 ed       	ldi	r30, 0xD3	; 211
     888:	f0 e3       	ldi	r31, 0x30	; 48
     88a:	91 50       	subi	r25, 0x01	; 1
     88c:	e0 40       	sbci	r30, 0x00	; 0
     88e:	f0 40       	sbci	r31, 0x00	; 0
     890:	e1 f7       	brne	.-8      	; 0x88a <main+0x136>
     892:	00 c0       	rjmp	.+0      	; 0x894 <main+0x140>
     894:	00 00       	nop
     896:	d4 cf       	rjmp	.-88     	; 0x840 <main+0xec>

00000898 <ICU_Init>:
     898:	8c 98       	cbi	0x11, 4	; 17
     89a:	82 e4       	ldi	r24, 0x42	; 66
     89c:	8e bd       	out	0x2e, r24	; 46
     89e:	1d bc       	out	0x2d, r1	; 45
     8a0:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1<<TICIE1);
	
}
void ICU_DisableTimer(void)
{
	TCCR1B =0;
     8a2:	17 bc       	out	0x27, r1	; 39
     8a4:	16 bc       	out	0x26, r1	; 38
     8a6:	80 e2       	ldi	r24, 0x20	; 32
     8a8:	87 bf       	out	0x37, r24	; 55
     8aa:	08 95       	ret

000008ac <__vector_11>:
}
ISR(TIMER1_CAPT_vect)
{	
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
	flag++;
     8ba:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag>
     8be:	8f 5f       	subi	r24, 0xFF	; 255
     8c0:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <flag>
	if(flag == 1)
     8c4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag>
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__vector_11+0x2c>
	{
		TCNT1 = 0;
     8cc:	1d bc       	out	0x2d, r1	; 45
     8ce:	1c bc       	out	0x2c, r1	; 44
		TCCR1B&=~(1<<ICES1);
     8d0:	8e b5       	in	r24, 0x2e	; 46
     8d2:	8f 7b       	andi	r24, 0xBF	; 191
     8d4:	8e bd       	out	0x2e, r24	; 46
     8d6:	0f c0       	rjmp	.+30     	; 0x8f6 <__vector_11+0x4a>
	}
	else if(flag == 2)
     8d8:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag>
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	59 f4       	brne	.+22     	; 0x8f6 <__vector_11+0x4a>
	{
		distance = ICR1;
     8e0:	86 b5       	in	r24, 0x26	; 38
     8e2:	97 b5       	in	r25, 0x27	; 39
     8e4:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <distance+0x1>
     8e8:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <distance>
		TCCR1B |=(1<<ICES1);
     8ec:	8e b5       	in	r24, 0x2e	; 46
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	8e bd       	out	0x2e, r24	; 46
		flag = 0;
     8f2:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag>
	}
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <Keypad_getPressedKey>:
{
	while(1)
	{
		for(uint8 col = 0; col < N_COL ; col++)
		{
			KEYPAD_PORT_DIR 	= 	(0b00010000 << col);
     904:	a0 e1       	ldi	r26, 0x10	; 16
     906:	b0 e0       	ldi	r27, 0x00	; 0
static uint8 Keypad_4X4_adjustSwitchNumber(uint8 digit);
#else
static uint8 Keypad_4X3_adjustSwitchNumber(uint8 digit);
#endif
uint8 Keypad_getPressedKey(void)
{
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	e4 2f       	mov	r30, r20
	while(1)
	{
		for(uint8 col = 0; col < N_COL ; col++)
		{
			KEYPAD_PORT_DIR 	= 	(0b00010000 << col);
     90e:	cd 01       	movw	r24, r26
     910:	04 2e       	mov	r0, r20
     912:	02 c0       	rjmp	.+4      	; 0x918 <Keypad_getPressedKey+0x14>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	0a 94       	dec	r0
     91a:	e2 f7       	brpl	.-8      	; 0x914 <Keypad_getPressedKey+0x10>
     91c:	81 bb       	out	0x11, r24	; 17
			KEYPAD_PORT 		=	(~(0b00010000<<col));
     91e:	80 95       	com	r24
     920:	82 bb       	out	0x12, r24	; 18
			for(uint8 row = 0; row < N_ROW ; row++)
			{
				#if(N_COL == 4)

				if(BIT_IS_CLEAR(KEYPAD_PORT_PIN,row))
     922:	80 9b       	sbis	0x10, 0	; 16
     924:	0e c0       	rjmp	.+28     	; 0x942 <Keypad_getPressedKey+0x3e>
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	62 2f       	mov	r22, r18
     92c:	80 b3       	in	r24, 0x10	; 16
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 2e       	mov	r0, r18
     932:	02 c0       	rjmp	.+4      	; 0x938 <Keypad_getPressedKey+0x34>
     934:	95 95       	asr	r25
     936:	87 95       	ror	r24
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <Keypad_getPressedKey+0x30>
     93c:	80 fd       	sbrc	r24, 0
     93e:	2c c0       	rjmp	.+88     	; 0x998 <Keypad_getPressedKey+0x94>
     940:	01 c0       	rjmp	.+2      	; 0x944 <Keypad_getPressedKey+0x40>
	{
		for(uint8 col = 0; col < N_COL ; col++)
		{
			KEYPAD_PORT_DIR 	= 	(0b00010000 << col);
			KEYPAD_PORT 		=	(~(0b00010000<<col));
			for(uint8 row = 0; row < N_ROW ; row++)
     942:	60 e0       	ldi	r22, 0x00	; 0
}
#if(N_COL == 4)
static uint8 Keypad_4X4_adjustSwitchNumber(uint8 digit)
{
	uint8 res=100;
		switch(digit)
     944:	ef 5f       	subi	r30, 0xFF	; 255
     946:	66 0f       	add	r22, r22
     948:	66 0f       	add	r22, r22
     94a:	e6 0f       	add	r30, r22
     94c:	8e 2f       	mov	r24, r30
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	ee 30       	cpi	r30, 0x0E	; 14
     956:	f1 05       	cpc	r31, r1
     958:	e8 f4       	brcc	.+58     	; 0x994 <Keypad_getPressedKey+0x90>
     95a:	ea 5b       	subi	r30, 0xBA	; 186
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	d4 c1       	rjmp	.+936    	; 0xd08 <__tablejump2__>
		{
		case 1:
			res = 'C';
     960:	83 e4       	ldi	r24, 0x43	; 67
     962:	08 95       	ret
			break;
		case 2:
			res = 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	08 95       	ret
			break;
		case 3:
			res = 2;
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	08 95       	ret
			break;
		case 4:
			res = 3;
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	08 95       	ret
			break;
		case 5:
			res = 4;
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	08 95       	ret
			break;
		case 6:
			res = 5;
     974:	85 e0       	ldi	r24, 0x05	; 5
     976:	08 95       	ret
			break;
		case 7:
			res = 6;
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	08 95       	ret
			break;
		case 8:
			res = 'L';
     97c:	8c e4       	ldi	r24, 0x4C	; 76
     97e:	08 95       	ret
			break;
		case 9:
			res = 7;
     980:	87 e0       	ldi	r24, 0x07	; 7
     982:	08 95       	ret
			break;
		case 10:
			res = 8;
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	08 95       	ret
			break;
		case 11:
			res = 9;
     988:	89 e0       	ldi	r24, 0x09	; 9
     98a:	08 95       	ret
			break;
		case 12:
			res = 13;
     98c:	8d e0       	ldi	r24, 0x0D	; 13
     98e:	08 95       	ret
			break;
		case 13:
			break;
		case 14:
			res = 0;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
	}
}
#if(N_COL == 4)
static uint8 Keypad_4X4_adjustSwitchNumber(uint8 digit)
{
	uint8 res=100;
     994:	84 e6       	ldi	r24, 0x64	; 100
			for(uint8 row = 0; row < N_ROW ; row++)
			{
				#if(N_COL == 4)

				if(BIT_IS_CLEAR(KEYPAD_PORT_PIN,row))
					return Keypad_4X4_adjustSwitchNumber(row*N_COL+col+1);
     996:	08 95       	ret
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		for(uint8 col = 0; col < N_COL ; col++)
		{
			KEYPAD_PORT_DIR 	= 	(0b00010000 << col);
			KEYPAD_PORT 		=	(~(0b00010000<<col));
			for(uint8 row = 0; row < N_ROW ; row++)
     99c:	24 30       	cpi	r18, 0x04	; 4
     99e:	31 05       	cpc	r19, r1
     9a0:	21 f6       	brne	.-120    	; 0x92a <Keypad_getPressedKey+0x26>
     9a2:	4f 5f       	subi	r20, 0xFF	; 255
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
#endif
uint8 Keypad_getPressedKey(void)
{
	while(1)
	{
		for(uint8 col = 0; col < N_COL ; col++)
     9a6:	44 30       	cpi	r20, 0x04	; 4
     9a8:	51 05       	cpc	r21, r1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <Keypad_getPressedKey+0xaa>
     9ac:	af cf       	rjmp	.-162    	; 0x90c <Keypad_getPressedKey+0x8>
     9ae:	ac cf       	rjmp	.-168    	; 0x908 <Keypad_getPressedKey+0x4>

000009b0 <lcd_SendCMD>:
}
void lcd_DispCharXY(INT8U x,INT8U y,INT8U data)
{
	lcd_Gotoxy(x,y);
	lcd_DispChar(data);
}
     9b0:	c5 98       	cbi	0x18, 5	; 24
     9b2:	95 b3       	in	r25, 0x15	; 21
     9b4:	9f 70       	andi	r25, 0x0F	; 15
     9b6:	28 2f       	mov	r18, r24
     9b8:	20 7f       	andi	r18, 0xF0	; 240
     9ba:	92 2b       	or	r25, r18
     9bc:	95 bb       	out	0x15, r25	; 21
     9be:	c7 9a       	sbi	0x18, 7	; 24
     9c0:	c7 98       	cbi	0x18, 7	; 24
     9c2:	25 b3       	in	r18, 0x15	; 21
     9c4:	2f 70       	andi	r18, 0x0F	; 15
     9c6:	30 e1       	ldi	r19, 0x10	; 16
     9c8:	83 9f       	mul	r24, r19
     9ca:	c0 01       	movw	r24, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	82 2b       	or	r24, r18
     9d0:	85 bb       	out	0x15, r24	; 21
     9d2:	c7 9a       	sbi	0x18, 7	; 24
     9d4:	c7 98       	cbi	0x18, 7	; 24
     9d6:	8a e6       	ldi	r24, 0x6A	; 106
     9d8:	8a 95       	dec	r24
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <lcd_SendCMD+0x28>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <lcd_SendCMD+0x2e>
     9de:	08 95       	ret

000009e0 <lcd_SendData>:
     9e0:	c5 9a       	sbi	0x18, 5	; 24
     9e2:	95 b3       	in	r25, 0x15	; 21
     9e4:	9f 70       	andi	r25, 0x0F	; 15
     9e6:	28 2f       	mov	r18, r24
     9e8:	20 7f       	andi	r18, 0xF0	; 240
     9ea:	92 2b       	or	r25, r18
     9ec:	95 bb       	out	0x15, r25	; 21
     9ee:	c7 9a       	sbi	0x18, 7	; 24
     9f0:	c7 98       	cbi	0x18, 7	; 24
     9f2:	25 b3       	in	r18, 0x15	; 21
     9f4:	2f 70       	andi	r18, 0x0F	; 15
     9f6:	30 e1       	ldi	r19, 0x10	; 16
     9f8:	83 9f       	mul	r24, r19
     9fa:	c0 01       	movw	r24, r0
     9fc:	11 24       	eor	r1, r1
     9fe:	82 2b       	or	r24, r18
     a00:	85 bb       	out	0x15, r24	; 21
     a02:	c7 9a       	sbi	0x18, 7	; 24
     a04:	c7 98       	cbi	0x18, 7	; 24
     a06:	8a e6       	ldi	r24, 0x6A	; 106
     a08:	8a 95       	dec	r24
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <lcd_SendData+0x28>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <lcd_SendData+0x2e>
     a0e:	08 95       	ret

00000a10 <lcd_Gotoxy>:
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	21 f4       	brne	.+8      	; 0xa1c <lcd_Gotoxy+0xc>
     a14:	8f e7       	ldi	r24, 0x7F	; 127
     a16:	86 0f       	add	r24, r22
     a18:	cb cf       	rjmp	.-106    	; 0x9b0 <lcd_SendCMD>
     a1a:	08 95       	ret
     a1c:	8f eb       	ldi	r24, 0xBF	; 191
     a1e:	86 0f       	add	r24, r22
     a20:	c7 cf       	rjmp	.-114    	; 0x9b0 <lcd_SendCMD>
     a22:	08 95       	ret

00000a24 <lcd_Clear>:
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	c4 df       	rcall	.-120    	; 0x9b0 <lcd_SendCMD>
     a28:	8f e0       	ldi	r24, 0x0F	; 15
     a2a:	97 e2       	ldi	r25, 0x27	; 39
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <lcd_Clear+0x8>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <lcd_Clear+0xe>
     a32:	00 00       	nop
     a34:	08 95       	ret

00000a36 <lCD_Init>:
     a36:	14 9a       	sbi	0x02, 4	; 2
     a38:	87 b3       	in	r24, 0x17	; 23
     a3a:	80 6e       	ori	r24, 0xE0	; 224
     a3c:	87 bb       	out	0x17, r24	; 23
     a3e:	84 b3       	in	r24, 0x14	; 20
     a40:	80 6f       	ori	r24, 0xF0	; 240
     a42:	84 bb       	out	0x14, r24	; 20
     a44:	1c 9a       	sbi	0x03, 4	; 3
     a46:	88 b3       	in	r24, 0x18	; 24
     a48:	8f 71       	andi	r24, 0x1F	; 31
     a4a:	88 bb       	out	0x18, r24	; 24
     a4c:	85 b3       	in	r24, 0x15	; 21
     a4e:	8f 70       	andi	r24, 0x0F	; 15
     a50:	85 bb       	out	0x15, r24	; 21
     a52:	8f e3       	ldi	r24, 0x3F	; 63
     a54:	9c e9       	ldi	r25, 0x9C	; 156
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <lCD_Init+0x20>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <lCD_Init+0x26>
     a5c:	00 00       	nop
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	a7 df       	rcall	.-178    	; 0x9b0 <lcd_SendCMD>
     a62:	88 e2       	ldi	r24, 0x28	; 40
     a64:	a5 df       	rcall	.-182    	; 0x9b0 <lcd_SendCMD>
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	a3 df       	rcall	.-186    	; 0x9b0 <lcd_SendCMD>
     a6a:	86 e0       	ldi	r24, 0x06	; 6
     a6c:	a1 df       	rcall	.-190    	; 0x9b0 <lcd_SendCMD>
     a6e:	da cf       	rjmp	.-76     	; 0xa24 <lcd_Clear>
     a70:	08 95       	ret

00000a72 <lcd_DispChar>:
     a72:	b6 cf       	rjmp	.-148    	; 0x9e0 <lcd_SendData>
     a74:	08 95       	ret

00000a76 <lcd_DispStr>:
void lcd_DispStr(INT8U* str)
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
	while(str[0])
     a7c:	88 81       	ld	r24, Y
     a7e:	88 23       	and	r24, r24
     a80:	29 f0       	breq	.+10     	; 0xa8c <lcd_DispStr+0x16>
     a82:	21 96       	adiw	r28, 0x01	; 1
	lcd_SendCMD(CMD_CLEAR);
	_delay_ms(5); /* commands activation delay */
}
void lcd_DispChar(INT8U data)
{
	lcd_SendData(data);
     a84:	ad df       	rcall	.-166    	; 0x9e0 <lcd_SendData>
	lcd_Gotoxy(x,y);
	lcd_DispChar(data);
}
void lcd_DispStr(INT8U* str)
{
	while(str[0])
     a86:	89 91       	ld	r24, Y+
     a88:	81 11       	cpse	r24, r1
     a8a:	fc cf       	rjmp	.-8      	; 0xa84 <lcd_DispStr+0xe>
	{
		lcd_DispChar(str[0]);
		str++;
	}
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <lcd_DispStrXY>:
void lcd_DispStrXY(INT8U x,INT8U y,INT8U* str)
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ea 01       	movw	r28, r20
	lcd_Gotoxy(x,y);
     a98:	bb df       	rcall	.-138    	; 0xa10 <lcd_Gotoxy>
	lcd_DispStr(str);
     a9a:	ce 01       	movw	r24, r28
     a9c:	ec df       	rcall	.-40     	; 0xa76 <lcd_DispStr>
}
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <lCD_DispInt>:
	
void lCD_DispInt(INT32U num)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	60 97       	sbiw	r28, 0x10	; 16
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
	char str[16];
	sprintf(str, "%d", num);
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	7f 93       	push	r23
     ac2:	6f 93       	push	r22
     ac4:	8c eb       	ldi	r24, 0xBC	; 188
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	8e 01       	movw	r16, r28
     ace:	0f 5f       	subi	r16, 0xFF	; 255
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	1f 93       	push	r17
     ad4:	0f 93       	push	r16
     ad6:	30 d1       	rcall	.+608    	; 0xd38 <sprintf>
	lcd_DispStr(str);
     ad8:	c8 01       	movw	r24, r16
     ada:	cd df       	rcall	.-102    	; 0xa76 <lcd_DispStr>
	
}
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	60 96       	adiw	r28, 0x10	; 16
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <UART_Receiver_Int_Enable>:

#include "service_uart.h"

void UART_Receiver_Int_Enable(void)
{
	UCSR0B|=(1<<RXCIE);
     afc:	57 9a       	sbi	0x0a, 7	; 10
     afe:	08 95       	ret

00000b00 <UART_RecieveByte>:
}

uint8 UART_RecieveByte(void)
{

	return UDR0;
     b00:	8c b1       	in	r24, 0x0c	; 12
}
     b02:	08 95       	ret

00000b04 <Timer0_CTCInit>:
		/*non pwm*/
		TCCR1C = (1<<FOC1A)|(1<<FOC1B)|(1<<FOC1C);
		/*intial value every 30 ms will be OVF*/
		TCNT1 = 35536;
		/*timer1 interrupt enable*/
		TIMSK = (1<<TOIE1);
     b04:	83 b7       	in	r24, 0x33	; 51
     b06:	8f 69       	ori	r24, 0x9F	; 159
     b08:	83 bf       	out	0x33, r24	; 51
     b0a:	12 be       	out	0x32, r1	; 50
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	81 bf       	out	0x31, r24	; 49
     b10:	87 b7       	in	r24, 0x37	; 55
     b12:	82 60       	ori	r24, 0x02	; 2
     b14:	87 bf       	out	0x37, r24	; 55
     b16:	08 95       	ret

00000b18 <Timer3_PWMInit>:
     b18:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b1c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b20:	23 ec       	ldi	r18, 0xC3	; 195
     b22:	39 e0       	ldi	r19, 0x09	; 9
     b24:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b28:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     b2c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b30:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b34:	82 e8       	ldi	r24, 0x82	; 130
     b36:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     b3a:	8b e1       	ldi	r24, 0x1B	; 27
     b3c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     b40:	08 95       	ret

00000b42 <setCallback>:
}
void setCallback(void(*funPtr)(void))
{
	g_funPtr = funPtr;
     b42:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <g_funPtr+0x1>
     b46:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <g_funPtr>
     b4a:	08 95       	ret

00000b4c <__vector_14>:
}
ISR(TIMER1_OVF_vect)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	0b b6       	in	r0, 0x3b	; 59
     b58:	0f 92       	push	r0
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
	PORTE&=~(1<<PE7);
     b72:	1f 98       	cbi	0x03, 7	; 3
	(*g_funPtr)();
     b74:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <g_funPtr>
     b78:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <g_funPtr+0x1>
     b7c:	09 95       	icall
	TCNT1 = 35536;
     b7e:	80 ed       	ldi	r24, 0xD0	; 208
     b80:	9a e8       	ldi	r25, 0x8A	; 138
     b82:	9d bd       	out	0x2d, r25	; 45
     b84:	8c bd       	out	0x2c, r24	; 44
			
}
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0b be       	out	0x3b, r0	; 59
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Timer2_OVFInit>:
void Timer2_OVFInit(void)
{
	TCCR2|=(1<<FOC2)|(1<<CS20)|(1<<CS22);
     bac:	85 b5       	in	r24, 0x25	; 37
     bae:	85 68       	ori	r24, 0x85	; 133
     bb0:	85 bd       	out	0x25, r24	; 37
	TCNT2=0;
     bb2:	14 bc       	out	0x24, r1	; 36
	TIMSK|=(1<<TOIE2);
     bb4:	87 b7       	in	r24, 0x37	; 55
     bb6:	80 64       	ori	r24, 0x40	; 64
     bb8:	87 bf       	out	0x37, r24	; 55
     bba:	08 95       	ret

00000bbc <__vector_10>:
}
ISR(TIMER2_OVF_vect)
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	0b b6       	in	r0, 0x3b	; 59
     bc8:	0f 92       	push	r0
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
	PORTE&=~(1<<PE7);
     be2:	1f 98       	cbi	0x03, 7	; 3
	(*g_funPtr)();
     be4:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <g_funPtr>
     be8:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <g_funPtr+0x1>
     bec:	09 95       	icall
	TCNT2=0;
     bee:	14 bc       	out	0x24, r1	; 36

}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <TWI_Init>:
uint8 TWI_ReadAck(void)
{
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
	while(BIT_IS_CLEAR(TWCR,TWINT));
	return TWDR;	
}
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     c1c:	8c ef       	ldi	r24, 0xFC	; 252
     c1e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     c22:	80 e1       	ldi	r24, 0x10	; 16
     c24:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c2e:	08 95       	ret

00000c30 <TWI_Start>:
     c30:	84 ea       	ldi	r24, 0xA4	; 164
     c32:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c36:	e4 e7       	ldi	r30, 0x74	; 116
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	88 23       	and	r24, r24
     c3e:	ec f7       	brge	.-6      	; 0xc3a <TWI_Start+0xa>
     c40:	08 95       	ret

00000c42 <TWI_Stop>:
     c42:	84 e9       	ldi	r24, 0x94	; 148
     c44:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c48:	08 95       	ret

00000c4a <TWI_ReadNotAck>:
uint8 TWI_ReadNotAck(void)
{
	TWCR = (1<<TWEN)|(1<<TWINT);
     c4a:	84 e8       	ldi	r24, 0x84	; 132
     c4c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(BIT_IS_CLEAR(TWCR,TWINT));
     c50:	e4 e7       	ldi	r30, 0x74	; 116
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	ec f7       	brge	.-6      	; 0xc54 <TWI_ReadNotAck+0xa>
	return TWDR;
     c5a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     c5e:	08 95       	ret

00000c60 <TWI_Write>:
void TWI_Write(uint8 data)
{
	TWDR = data;
     c60:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWEN)|(1<<TWINT);
     c64:	84 e8       	ldi	r24, 0x84	; 132
     c66:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(BIT_IS_CLEAR(TWCR,TWINT));	
     c6a:	e4 e7       	ldi	r30, 0x74	; 116
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	ec f7       	brge	.-6      	; 0xc6e <TWI_Write+0xe>
}
     c74:	08 95       	ret

00000c76 <UART_Init>:
	{
		status=0;
	}
	return status;
	
}
     c76:	59 98       	cbi	0x0b, 1	; 11
     c78:	e5 e9       	ldi	r30, 0x95	; 149
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	80 83       	st	Z, r24
     c82:	80 81       	ld	r24, Z
     c84:	84 60       	ori	r24, 0x04	; 4
     c86:	80 83       	st	Z, r24
     c88:	80 81       	ld	r24, Z
     c8a:	8f 7e       	andi	r24, 0xEF	; 239
     c8c:	80 83       	st	Z, r24
     c8e:	80 81       	ld	r24, Z
     c90:	80 62       	ori	r24, 0x20	; 32
     c92:	80 83       	st	Z, r24
     c94:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     c98:	83 e3       	ldi	r24, 0x33	; 51
     c9a:	89 b9       	out	0x09, r24	; 9
     c9c:	54 9a       	sbi	0x0a, 4	; 10
     c9e:	53 9a       	sbi	0x0a, 3	; 10
     ca0:	08 95       	ret

00000ca2 <uart_setCallback>:
void uart_setCallback(void(*funPtr)(void))
{
	u_funPtr = funPtr;
     ca2:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <u_funPtr+0x1>
     ca6:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <u_funPtr>
     caa:	08 95       	ret

00000cac <__vector_18>:
}

ISR(USART0_RX_vect)
{
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	0b b6       	in	r0, 0x3b	; 59
     cb8:	0f 92       	push	r0
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
	g_uartDataReg=UART_RecieveByte();
     cd2:	16 df       	rcall	.-468    	; 0xb00 <UART_RecieveByte>
     cd4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <g_uartDataReg>
	(*u_funPtr)();
     cd8:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <u_funPtr>
     cdc:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <u_funPtr+0x1>
     ce0:	09 95       	icall
	
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0b be       	out	0x3b, r0	; 59
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	0f 90       	pop	r0
     d04:	1f 90       	pop	r1
     d06:	18 95       	reti

00000d08 <__tablejump2__>:
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	00 24       	eor	r0, r0
     d0e:	00 1c       	adc	r0, r0
     d10:	0b be       	out	0x3b, r0	; 59
     d12:	07 90       	elpm	r0, Z+
     d14:	f6 91       	elpm	r31, Z
     d16:	e0 2d       	mov	r30, r0
     d18:	09 94       	ijmp

00000d1a <__umulhisi3>:
     d1a:	a2 9f       	mul	r26, r18
     d1c:	b0 01       	movw	r22, r0
     d1e:	b3 9f       	mul	r27, r19
     d20:	c0 01       	movw	r24, r0
     d22:	a3 9f       	mul	r26, r19
     d24:	70 0d       	add	r23, r0
     d26:	81 1d       	adc	r24, r1
     d28:	11 24       	eor	r1, r1
     d2a:	91 1d       	adc	r25, r1
     d2c:	b2 9f       	mul	r27, r18
     d2e:	70 0d       	add	r23, r0
     d30:	81 1d       	adc	r24, r1
     d32:	11 24       	eor	r1, r1
     d34:	91 1d       	adc	r25, r1
     d36:	08 95       	ret

00000d38 <sprintf>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	2e 97       	sbiw	r28, 0x0e	; 14
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	0d 89       	ldd	r16, Y+21	; 0x15
     d52:	1e 89       	ldd	r17, Y+22	; 0x16
     d54:	86 e0       	ldi	r24, 0x06	; 6
     d56:	8c 83       	std	Y+4, r24	; 0x04
     d58:	1a 83       	std	Y+2, r17	; 0x02
     d5a:	09 83       	std	Y+1, r16	; 0x01
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	9f e7       	ldi	r25, 0x7F	; 127
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	ae 01       	movw	r20, r28
     d66:	47 5e       	subi	r20, 0xE7	; 231
     d68:	5f 4f       	sbci	r21, 0xFF	; 255
     d6a:	6f 89       	ldd	r22, Y+23	; 0x17
     d6c:	78 8d       	ldd	r23, Y+24	; 0x18
     d6e:	ce 01       	movw	r24, r28
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	10 d0       	rcall	.+32     	; 0xd94 <vfprintf>
     d74:	ef 81       	ldd	r30, Y+7	; 0x07
     d76:	f8 85       	ldd	r31, Y+8	; 0x08
     d78:	e0 0f       	add	r30, r16
     d7a:	f1 1f       	adc	r31, r17
     d7c:	10 82       	st	Z, r1
     d7e:	2e 96       	adiw	r28, 0x0e	; 14
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <vfprintf>:
     d94:	2f 92       	push	r2
     d96:	3f 92       	push	r3
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	2b 97       	sbiw	r28, 0x0b	; 11
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	6c 01       	movw	r12, r24
     dca:	7b 01       	movw	r14, r22
     dcc:	8a 01       	movw	r16, r20
     dce:	fc 01       	movw	r30, r24
     dd0:	17 82       	std	Z+7, r1	; 0x07
     dd2:	16 82       	std	Z+6, r1	; 0x06
     dd4:	83 81       	ldd	r24, Z+3	; 0x03
     dd6:	81 ff       	sbrs	r24, 1
     dd8:	bf c1       	rjmp	.+894    	; 0x1158 <__stack+0x59>
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	3c 01       	movw	r6, r24
     de0:	f6 01       	movw	r30, r12
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	f7 01       	movw	r30, r14
     de6:	93 fd       	sbrc	r25, 3
     de8:	85 91       	lpm	r24, Z+
     dea:	93 ff       	sbrs	r25, 3
     dec:	81 91       	ld	r24, Z+
     dee:	7f 01       	movw	r14, r30
     df0:	88 23       	and	r24, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <vfprintf+0x62>
     df4:	ad c1       	rjmp	.+858    	; 0x1150 <__stack+0x51>
     df6:	85 32       	cpi	r24, 0x25	; 37
     df8:	39 f4       	brne	.+14     	; 0xe08 <vfprintf+0x74>
     dfa:	93 fd       	sbrc	r25, 3
     dfc:	85 91       	lpm	r24, Z+
     dfe:	93 ff       	sbrs	r25, 3
     e00:	81 91       	ld	r24, Z+
     e02:	7f 01       	movw	r14, r30
     e04:	85 32       	cpi	r24, 0x25	; 37
     e06:	21 f4       	brne	.+8      	; 0xe10 <vfprintf+0x7c>
     e08:	b6 01       	movw	r22, r12
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	d6 d1       	rcall	.+940    	; 0x11ba <fputc>
     e0e:	e8 cf       	rjmp	.-48     	; 0xde0 <vfprintf+0x4c>
     e10:	91 2c       	mov	r9, r1
     e12:	21 2c       	mov	r2, r1
     e14:	31 2c       	mov	r3, r1
     e16:	ff e1       	ldi	r31, 0x1F	; 31
     e18:	f3 15       	cp	r31, r3
     e1a:	d8 f0       	brcs	.+54     	; 0xe52 <vfprintf+0xbe>
     e1c:	8b 32       	cpi	r24, 0x2B	; 43
     e1e:	79 f0       	breq	.+30     	; 0xe3e <vfprintf+0xaa>
     e20:	38 f4       	brcc	.+14     	; 0xe30 <vfprintf+0x9c>
     e22:	80 32       	cpi	r24, 0x20	; 32
     e24:	79 f0       	breq	.+30     	; 0xe44 <vfprintf+0xb0>
     e26:	83 32       	cpi	r24, 0x23	; 35
     e28:	a1 f4       	brne	.+40     	; 0xe52 <vfprintf+0xbe>
     e2a:	23 2d       	mov	r18, r3
     e2c:	20 61       	ori	r18, 0x10	; 16
     e2e:	1d c0       	rjmp	.+58     	; 0xe6a <vfprintf+0xd6>
     e30:	8d 32       	cpi	r24, 0x2D	; 45
     e32:	61 f0       	breq	.+24     	; 0xe4c <vfprintf+0xb8>
     e34:	80 33       	cpi	r24, 0x30	; 48
     e36:	69 f4       	brne	.+26     	; 0xe52 <vfprintf+0xbe>
     e38:	23 2d       	mov	r18, r3
     e3a:	21 60       	ori	r18, 0x01	; 1
     e3c:	16 c0       	rjmp	.+44     	; 0xe6a <vfprintf+0xd6>
     e3e:	83 2d       	mov	r24, r3
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	38 2e       	mov	r3, r24
     e44:	e3 2d       	mov	r30, r3
     e46:	e4 60       	ori	r30, 0x04	; 4
     e48:	3e 2e       	mov	r3, r30
     e4a:	2a c0       	rjmp	.+84     	; 0xea0 <vfprintf+0x10c>
     e4c:	f3 2d       	mov	r31, r3
     e4e:	f8 60       	ori	r31, 0x08	; 8
     e50:	1d c0       	rjmp	.+58     	; 0xe8c <vfprintf+0xf8>
     e52:	37 fc       	sbrc	r3, 7
     e54:	2d c0       	rjmp	.+90     	; 0xeb0 <vfprintf+0x11c>
     e56:	20 ed       	ldi	r18, 0xD0	; 208
     e58:	28 0f       	add	r18, r24
     e5a:	2a 30       	cpi	r18, 0x0A	; 10
     e5c:	40 f0       	brcs	.+16     	; 0xe6e <vfprintf+0xda>
     e5e:	8e 32       	cpi	r24, 0x2E	; 46
     e60:	b9 f4       	brne	.+46     	; 0xe90 <vfprintf+0xfc>
     e62:	36 fc       	sbrc	r3, 6
     e64:	75 c1       	rjmp	.+746    	; 0x1150 <__stack+0x51>
     e66:	23 2d       	mov	r18, r3
     e68:	20 64       	ori	r18, 0x40	; 64
     e6a:	32 2e       	mov	r3, r18
     e6c:	19 c0       	rjmp	.+50     	; 0xea0 <vfprintf+0x10c>
     e6e:	36 fe       	sbrs	r3, 6
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0xea>
     e72:	8a e0       	ldi	r24, 0x0A	; 10
     e74:	98 9e       	mul	r9, r24
     e76:	20 0d       	add	r18, r0
     e78:	11 24       	eor	r1, r1
     e7a:	92 2e       	mov	r9, r18
     e7c:	11 c0       	rjmp	.+34     	; 0xea0 <vfprintf+0x10c>
     e7e:	ea e0       	ldi	r30, 0x0A	; 10
     e80:	2e 9e       	mul	r2, r30
     e82:	20 0d       	add	r18, r0
     e84:	11 24       	eor	r1, r1
     e86:	22 2e       	mov	r2, r18
     e88:	f3 2d       	mov	r31, r3
     e8a:	f0 62       	ori	r31, 0x20	; 32
     e8c:	3f 2e       	mov	r3, r31
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <vfprintf+0x10c>
     e90:	8c 36       	cpi	r24, 0x6C	; 108
     e92:	21 f4       	brne	.+8      	; 0xe9c <vfprintf+0x108>
     e94:	83 2d       	mov	r24, r3
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	38 2e       	mov	r3, r24
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x10c>
     e9c:	88 36       	cpi	r24, 0x68	; 104
     e9e:	41 f4       	brne	.+16     	; 0xeb0 <vfprintf+0x11c>
     ea0:	f7 01       	movw	r30, r14
     ea2:	93 fd       	sbrc	r25, 3
     ea4:	85 91       	lpm	r24, Z+
     ea6:	93 ff       	sbrs	r25, 3
     ea8:	81 91       	ld	r24, Z+
     eaa:	7f 01       	movw	r14, r30
     eac:	81 11       	cpse	r24, r1
     eae:	b3 cf       	rjmp	.-154    	; 0xe16 <vfprintf+0x82>
     eb0:	98 2f       	mov	r25, r24
     eb2:	9f 7d       	andi	r25, 0xDF	; 223
     eb4:	95 54       	subi	r25, 0x45	; 69
     eb6:	93 30       	cpi	r25, 0x03	; 3
     eb8:	28 f4       	brcc	.+10     	; 0xec4 <vfprintf+0x130>
     eba:	0c 5f       	subi	r16, 0xFC	; 252
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	9f e3       	ldi	r25, 0x3F	; 63
     ec0:	99 83       	std	Y+1, r25	; 0x01
     ec2:	0d c0       	rjmp	.+26     	; 0xede <vfprintf+0x14a>
     ec4:	83 36       	cpi	r24, 0x63	; 99
     ec6:	31 f0       	breq	.+12     	; 0xed4 <vfprintf+0x140>
     ec8:	83 37       	cpi	r24, 0x73	; 115
     eca:	71 f0       	breq	.+28     	; 0xee8 <vfprintf+0x154>
     ecc:	83 35       	cpi	r24, 0x53	; 83
     ece:	09 f0       	breq	.+2      	; 0xed2 <vfprintf+0x13e>
     ed0:	55 c0       	rjmp	.+170    	; 0xf7c <vfprintf+0x1e8>
     ed2:	20 c0       	rjmp	.+64     	; 0xf14 <vfprintf+0x180>
     ed4:	f8 01       	movw	r30, r16
     ed6:	80 81       	ld	r24, Z
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	0e 5f       	subi	r16, 0xFE	; 254
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	88 24       	eor	r8, r8
     ee0:	83 94       	inc	r8
     ee2:	91 2c       	mov	r9, r1
     ee4:	53 01       	movw	r10, r6
     ee6:	12 c0       	rjmp	.+36     	; 0xf0c <vfprintf+0x178>
     ee8:	28 01       	movw	r4, r16
     eea:	f2 e0       	ldi	r31, 0x02	; 2
     eec:	4f 0e       	add	r4, r31
     eee:	51 1c       	adc	r5, r1
     ef0:	f8 01       	movw	r30, r16
     ef2:	a0 80       	ld	r10, Z
     ef4:	b1 80       	ldd	r11, Z+1	; 0x01
     ef6:	36 fe       	sbrs	r3, 6
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <vfprintf+0x16c>
     efa:	69 2d       	mov	r22, r9
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <vfprintf+0x170>
     f00:	6f ef       	ldi	r22, 0xFF	; 255
     f02:	7f ef       	ldi	r23, 0xFF	; 255
     f04:	c5 01       	movw	r24, r10
     f06:	4e d1       	rcall	.+668    	; 0x11a4 <strnlen>
     f08:	4c 01       	movw	r8, r24
     f0a:	82 01       	movw	r16, r4
     f0c:	f3 2d       	mov	r31, r3
     f0e:	ff 77       	andi	r31, 0x7F	; 127
     f10:	3f 2e       	mov	r3, r31
     f12:	15 c0       	rjmp	.+42     	; 0xf3e <vfprintf+0x1aa>
     f14:	28 01       	movw	r4, r16
     f16:	22 e0       	ldi	r18, 0x02	; 2
     f18:	42 0e       	add	r4, r18
     f1a:	51 1c       	adc	r5, r1
     f1c:	f8 01       	movw	r30, r16
     f1e:	a0 80       	ld	r10, Z
     f20:	b1 80       	ldd	r11, Z+1	; 0x01
     f22:	36 fe       	sbrs	r3, 6
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <vfprintf+0x198>
     f26:	69 2d       	mov	r22, r9
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x19c>
     f2c:	6f ef       	ldi	r22, 0xFF	; 255
     f2e:	7f ef       	ldi	r23, 0xFF	; 255
     f30:	c5 01       	movw	r24, r10
     f32:	2d d1       	rcall	.+602    	; 0x118e <strnlen_P>
     f34:	4c 01       	movw	r8, r24
     f36:	f3 2d       	mov	r31, r3
     f38:	f0 68       	ori	r31, 0x80	; 128
     f3a:	3f 2e       	mov	r3, r31
     f3c:	82 01       	movw	r16, r4
     f3e:	33 fc       	sbrc	r3, 3
     f40:	19 c0       	rjmp	.+50     	; 0xf74 <vfprintf+0x1e0>
     f42:	82 2d       	mov	r24, r2
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	88 16       	cp	r8, r24
     f48:	99 06       	cpc	r9, r25
     f4a:	a0 f4       	brcc	.+40     	; 0xf74 <vfprintf+0x1e0>
     f4c:	b6 01       	movw	r22, r12
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	33 d1       	rcall	.+614    	; 0x11ba <fputc>
     f54:	2a 94       	dec	r2
     f56:	f5 cf       	rjmp	.-22     	; 0xf42 <vfprintf+0x1ae>
     f58:	f5 01       	movw	r30, r10
     f5a:	37 fc       	sbrc	r3, 7
     f5c:	85 91       	lpm	r24, Z+
     f5e:	37 fe       	sbrs	r3, 7
     f60:	81 91       	ld	r24, Z+
     f62:	5f 01       	movw	r10, r30
     f64:	b6 01       	movw	r22, r12
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	28 d1       	rcall	.+592    	; 0x11ba <fputc>
     f6a:	21 10       	cpse	r2, r1
     f6c:	2a 94       	dec	r2
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	82 1a       	sub	r8, r18
     f72:	91 08       	sbc	r9, r1
     f74:	81 14       	cp	r8, r1
     f76:	91 04       	cpc	r9, r1
     f78:	79 f7       	brne	.-34     	; 0xf58 <vfprintf+0x1c4>
     f7a:	e1 c0       	rjmp	.+450    	; 0x113e <__stack+0x3f>
     f7c:	84 36       	cpi	r24, 0x64	; 100
     f7e:	11 f0       	breq	.+4      	; 0xf84 <vfprintf+0x1f0>
     f80:	89 36       	cpi	r24, 0x69	; 105
     f82:	39 f5       	brne	.+78     	; 0xfd2 <vfprintf+0x23e>
     f84:	f8 01       	movw	r30, r16
     f86:	37 fe       	sbrs	r3, 7
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <vfprintf+0x204>
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	0c 5f       	subi	r16, 0xFC	; 252
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <vfprintf+0x214>
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	07 2e       	mov	r0, r23
     f9e:	00 0c       	add	r0, r0
     fa0:	88 0b       	sbc	r24, r24
     fa2:	99 0b       	sbc	r25, r25
     fa4:	0e 5f       	subi	r16, 0xFE	; 254
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	f3 2d       	mov	r31, r3
     faa:	ff 76       	andi	r31, 0x6F	; 111
     fac:	3f 2e       	mov	r3, r31
     fae:	97 ff       	sbrs	r25, 7
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <vfprintf+0x230>
     fb2:	90 95       	com	r25
     fb4:	80 95       	com	r24
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	f0 68       	ori	r31, 0x80	; 128
     fc2:	3f 2e       	mov	r3, r31
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	a3 01       	movw	r20, r6
     fca:	33 d1       	rcall	.+614    	; 0x1232 <__ultoa_invert>
     fcc:	88 2e       	mov	r8, r24
     fce:	86 18       	sub	r8, r6
     fd0:	44 c0       	rjmp	.+136    	; 0x105a <vfprintf+0x2c6>
     fd2:	85 37       	cpi	r24, 0x75	; 117
     fd4:	31 f4       	brne	.+12     	; 0xfe2 <vfprintf+0x24e>
     fd6:	23 2d       	mov	r18, r3
     fd8:	2f 7e       	andi	r18, 0xEF	; 239
     fda:	b2 2e       	mov	r11, r18
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	25 c0       	rjmp	.+74     	; 0x102c <vfprintf+0x298>
     fe2:	93 2d       	mov	r25, r3
     fe4:	99 7f       	andi	r25, 0xF9	; 249
     fe6:	b9 2e       	mov	r11, r25
     fe8:	8f 36       	cpi	r24, 0x6F	; 111
     fea:	c1 f0       	breq	.+48     	; 0x101c <vfprintf+0x288>
     fec:	18 f4       	brcc	.+6      	; 0xff4 <vfprintf+0x260>
     fee:	88 35       	cpi	r24, 0x58	; 88
     ff0:	79 f0       	breq	.+30     	; 0x1010 <vfprintf+0x27c>
     ff2:	ae c0       	rjmp	.+348    	; 0x1150 <__stack+0x51>
     ff4:	80 37       	cpi	r24, 0x70	; 112
     ff6:	19 f0       	breq	.+6      	; 0xffe <vfprintf+0x26a>
     ff8:	88 37       	cpi	r24, 0x78	; 120
     ffa:	21 f0       	breq	.+8      	; 0x1004 <vfprintf+0x270>
     ffc:	a9 c0       	rjmp	.+338    	; 0x1150 <__stack+0x51>
     ffe:	e9 2f       	mov	r30, r25
    1000:	e0 61       	ori	r30, 0x10	; 16
    1002:	be 2e       	mov	r11, r30
    1004:	b4 fe       	sbrs	r11, 4
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <vfprintf+0x28e>
    1008:	fb 2d       	mov	r31, r11
    100a:	f4 60       	ori	r31, 0x04	; 4
    100c:	bf 2e       	mov	r11, r31
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <vfprintf+0x28e>
    1010:	34 fe       	sbrs	r3, 4
    1012:	0a c0       	rjmp	.+20     	; 0x1028 <vfprintf+0x294>
    1014:	29 2f       	mov	r18, r25
    1016:	26 60       	ori	r18, 0x06	; 6
    1018:	b2 2e       	mov	r11, r18
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <vfprintf+0x294>
    101c:	28 e0       	ldi	r18, 0x08	; 8
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	05 c0       	rjmp	.+10     	; 0x102c <vfprintf+0x298>
    1022:	20 e1       	ldi	r18, 0x10	; 16
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfprintf+0x298>
    1028:	20 e1       	ldi	r18, 0x10	; 16
    102a:	32 e0       	ldi	r19, 0x02	; 2
    102c:	f8 01       	movw	r30, r16
    102e:	b7 fe       	sbrs	r11, 7
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <vfprintf+0x2ac>
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	0c 5f       	subi	r16, 0xFC	; 252
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	06 c0       	rjmp	.+12     	; 0x104c <vfprintf+0x2b8>
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 5f       	subi	r16, 0xFE	; 254
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	a3 01       	movw	r20, r6
    104e:	f1 d0       	rcall	.+482    	; 0x1232 <__ultoa_invert>
    1050:	88 2e       	mov	r8, r24
    1052:	86 18       	sub	r8, r6
    1054:	fb 2d       	mov	r31, r11
    1056:	ff 77       	andi	r31, 0x7F	; 127
    1058:	3f 2e       	mov	r3, r31
    105a:	36 fe       	sbrs	r3, 6
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <vfprintf+0x2e4>
    105e:	23 2d       	mov	r18, r3
    1060:	2e 7f       	andi	r18, 0xFE	; 254
    1062:	a2 2e       	mov	r10, r18
    1064:	89 14       	cp	r8, r9
    1066:	58 f4       	brcc	.+22     	; 0x107e <vfprintf+0x2ea>
    1068:	34 fe       	sbrs	r3, 4
    106a:	0b c0       	rjmp	.+22     	; 0x1082 <vfprintf+0x2ee>
    106c:	32 fc       	sbrc	r3, 2
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x2ee>
    1070:	83 2d       	mov	r24, r3
    1072:	8e 7e       	andi	r24, 0xEE	; 238
    1074:	a8 2e       	mov	r10, r24
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <vfprintf+0x2ee>
    1078:	b8 2c       	mov	r11, r8
    107a:	a3 2c       	mov	r10, r3
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <vfprintf+0x2f0>
    107e:	b8 2c       	mov	r11, r8
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <vfprintf+0x2f0>
    1082:	b9 2c       	mov	r11, r9
    1084:	a4 fe       	sbrs	r10, 4
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <vfprintf+0x312>
    1088:	fe 01       	movw	r30, r28
    108a:	e8 0d       	add	r30, r8
    108c:	f1 1d       	adc	r31, r1
    108e:	80 81       	ld	r24, Z
    1090:	80 33       	cpi	r24, 0x30	; 48
    1092:	21 f4       	brne	.+8      	; 0x109c <vfprintf+0x308>
    1094:	9a 2d       	mov	r25, r10
    1096:	99 7e       	andi	r25, 0xE9	; 233
    1098:	a9 2e       	mov	r10, r25
    109a:	09 c0       	rjmp	.+18     	; 0x10ae <vfprintf+0x31a>
    109c:	a2 fe       	sbrs	r10, 2
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x318>
    10a0:	b3 94       	inc	r11
    10a2:	b3 94       	inc	r11
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <vfprintf+0x31a>
    10a6:	8a 2d       	mov	r24, r10
    10a8:	86 78       	andi	r24, 0x86	; 134
    10aa:	09 f0       	breq	.+2      	; 0x10ae <vfprintf+0x31a>
    10ac:	b3 94       	inc	r11
    10ae:	a3 fc       	sbrc	r10, 3
    10b0:	10 c0       	rjmp	.+32     	; 0x10d2 <vfprintf+0x33e>
    10b2:	a0 fe       	sbrs	r10, 0
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <vfprintf+0x32e>
    10b6:	b2 14       	cp	r11, r2
    10b8:	80 f4       	brcc	.+32     	; 0x10da <vfprintf+0x346>
    10ba:	28 0c       	add	r2, r8
    10bc:	92 2c       	mov	r9, r2
    10be:	9b 18       	sub	r9, r11
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <vfprintf+0x348>
    10c2:	b2 14       	cp	r11, r2
    10c4:	58 f4       	brcc	.+22     	; 0x10dc <vfprintf+0x348>
    10c6:	b6 01       	movw	r22, r12
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	76 d0       	rcall	.+236    	; 0x11ba <fputc>
    10ce:	b3 94       	inc	r11
    10d0:	f8 cf       	rjmp	.-16     	; 0x10c2 <vfprintf+0x32e>
    10d2:	b2 14       	cp	r11, r2
    10d4:	18 f4       	brcc	.+6      	; 0x10dc <vfprintf+0x348>
    10d6:	2b 18       	sub	r2, r11
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x34a>
    10da:	98 2c       	mov	r9, r8
    10dc:	21 2c       	mov	r2, r1
    10de:	a4 fe       	sbrs	r10, 4
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <__stack+0x1>
    10e2:	b6 01       	movw	r22, r12
    10e4:	80 e3       	ldi	r24, 0x30	; 48
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	68 d0       	rcall	.+208    	; 0x11ba <fputc>
    10ea:	a2 fe       	sbrs	r10, 2
    10ec:	16 c0       	rjmp	.+44     	; 0x111a <__stack+0x1b>
    10ee:	a1 fc       	sbrc	r10, 1
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <vfprintf+0x364>
    10f2:	88 e7       	ldi	r24, 0x78	; 120
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <vfprintf+0x368>
    10f8:	88 e5       	ldi	r24, 0x58	; 88
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	b6 01       	movw	r22, r12
    10fe:	0c c0       	rjmp	.+24     	; 0x1118 <__stack+0x19>
    1100:	8a 2d       	mov	r24, r10
    1102:	86 78       	andi	r24, 0x86	; 134
    1104:	51 f0       	breq	.+20     	; 0x111a <__stack+0x1b>
    1106:	a1 fe       	sbrs	r10, 1
    1108:	02 c0       	rjmp	.+4      	; 0x110e <__stack+0xf>
    110a:	8b e2       	ldi	r24, 0x2B	; 43
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <__stack+0x11>
    110e:	80 e2       	ldi	r24, 0x20	; 32
    1110:	a7 fc       	sbrc	r10, 7
    1112:	8d e2       	ldi	r24, 0x2D	; 45
    1114:	b6 01       	movw	r22, r12
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	50 d0       	rcall	.+160    	; 0x11ba <fputc>
    111a:	89 14       	cp	r8, r9
    111c:	30 f4       	brcc	.+12     	; 0x112a <__stack+0x2b>
    111e:	b6 01       	movw	r22, r12
    1120:	80 e3       	ldi	r24, 0x30	; 48
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	4a d0       	rcall	.+148    	; 0x11ba <fputc>
    1126:	9a 94       	dec	r9
    1128:	f8 cf       	rjmp	.-16     	; 0x111a <__stack+0x1b>
    112a:	8a 94       	dec	r8
    112c:	f3 01       	movw	r30, r6
    112e:	e8 0d       	add	r30, r8
    1130:	f1 1d       	adc	r31, r1
    1132:	80 81       	ld	r24, Z
    1134:	b6 01       	movw	r22, r12
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	40 d0       	rcall	.+128    	; 0x11ba <fputc>
    113a:	81 10       	cpse	r8, r1
    113c:	f6 cf       	rjmp	.-20     	; 0x112a <__stack+0x2b>
    113e:	22 20       	and	r2, r2
    1140:	09 f4       	brne	.+2      	; 0x1144 <__stack+0x45>
    1142:	4e ce       	rjmp	.-868    	; 0xde0 <vfprintf+0x4c>
    1144:	b6 01       	movw	r22, r12
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	37 d0       	rcall	.+110    	; 0x11ba <fputc>
    114c:	2a 94       	dec	r2
    114e:	f7 cf       	rjmp	.-18     	; 0x113e <__stack+0x3f>
    1150:	f6 01       	movw	r30, r12
    1152:	86 81       	ldd	r24, Z+6	; 0x06
    1154:	97 81       	ldd	r25, Z+7	; 0x07
    1156:	02 c0       	rjmp	.+4      	; 0x115c <__stack+0x5d>
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	2b 96       	adiw	r28, 0x0b	; 11
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	7f 90       	pop	r7
    1182:	6f 90       	pop	r6
    1184:	5f 90       	pop	r5
    1186:	4f 90       	pop	r4
    1188:	3f 90       	pop	r3
    118a:	2f 90       	pop	r2
    118c:	08 95       	ret

0000118e <strnlen_P>:
    118e:	fc 01       	movw	r30, r24
    1190:	05 90       	lpm	r0, Z+
    1192:	61 50       	subi	r22, 0x01	; 1
    1194:	70 40       	sbci	r23, 0x00	; 0
    1196:	01 10       	cpse	r0, r1
    1198:	d8 f7       	brcc	.-10     	; 0x1190 <strnlen_P+0x2>
    119a:	80 95       	com	r24
    119c:	90 95       	com	r25
    119e:	8e 0f       	add	r24, r30
    11a0:	9f 1f       	adc	r25, r31
    11a2:	08 95       	ret

000011a4 <strnlen>:
    11a4:	fc 01       	movw	r30, r24
    11a6:	61 50       	subi	r22, 0x01	; 1
    11a8:	70 40       	sbci	r23, 0x00	; 0
    11aa:	01 90       	ld	r0, Z+
    11ac:	01 10       	cpse	r0, r1
    11ae:	d8 f7       	brcc	.-10     	; 0x11a6 <strnlen+0x2>
    11b0:	80 95       	com	r24
    11b2:	90 95       	com	r25
    11b4:	8e 0f       	add	r24, r30
    11b6:	9f 1f       	adc	r25, r31
    11b8:	08 95       	ret

000011ba <fputc>:
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	fb 01       	movw	r30, r22
    11c4:	23 81       	ldd	r18, Z+3	; 0x03
    11c6:	21 fd       	sbrc	r18, 1
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <fputc+0x16>
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	2c c0       	rjmp	.+88     	; 0x1228 <fputc+0x6e>
    11d0:	22 ff       	sbrs	r18, 2
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <fputc+0x46>
    11d4:	46 81       	ldd	r20, Z+6	; 0x06
    11d6:	57 81       	ldd	r21, Z+7	; 0x07
    11d8:	24 81       	ldd	r18, Z+4	; 0x04
    11da:	35 81       	ldd	r19, Z+5	; 0x05
    11dc:	42 17       	cp	r20, r18
    11de:	53 07       	cpc	r21, r19
    11e0:	44 f4       	brge	.+16     	; 0x11f2 <fputc+0x38>
    11e2:	a0 81       	ld	r26, Z
    11e4:	b1 81       	ldd	r27, Z+1	; 0x01
    11e6:	9d 01       	movw	r18, r26
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	31 83       	std	Z+1, r19	; 0x01
    11ee:	20 83       	st	Z, r18
    11f0:	8c 93       	st	X, r24
    11f2:	26 81       	ldd	r18, Z+6	; 0x06
    11f4:	37 81       	ldd	r19, Z+7	; 0x07
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	37 83       	std	Z+7, r19	; 0x07
    11fc:	26 83       	std	Z+6, r18	; 0x06
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <fputc+0x6e>
    1200:	8b 01       	movw	r16, r22
    1202:	ec 01       	movw	r28, r24
    1204:	fb 01       	movw	r30, r22
    1206:	00 84       	ldd	r0, Z+8	; 0x08
    1208:	f1 85       	ldd	r31, Z+9	; 0x09
    120a:	e0 2d       	mov	r30, r0
    120c:	09 95       	icall
    120e:	89 2b       	or	r24, r25
    1210:	e1 f6       	brne	.-72     	; 0x11ca <fputc+0x10>
    1212:	d8 01       	movw	r26, r16
    1214:	16 96       	adiw	r26, 0x06	; 6
    1216:	8d 91       	ld	r24, X+
    1218:	9c 91       	ld	r25, X
    121a:	17 97       	sbiw	r26, 0x07	; 7
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	17 96       	adiw	r26, 0x07	; 7
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
    1224:	16 97       	sbiw	r26, 0x06	; 6
    1226:	ce 01       	movw	r24, r28
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	08 95       	ret

00001232 <__ultoa_invert>:
    1232:	fa 01       	movw	r30, r20
    1234:	aa 27       	eor	r26, r26
    1236:	28 30       	cpi	r18, 0x08	; 8
    1238:	51 f1       	breq	.+84     	; 0x128e <__ultoa_invert+0x5c>
    123a:	20 31       	cpi	r18, 0x10	; 16
    123c:	81 f1       	breq	.+96     	; 0x129e <__ultoa_invert+0x6c>
    123e:	e8 94       	clt
    1240:	6f 93       	push	r22
    1242:	6e 7f       	andi	r22, 0xFE	; 254
    1244:	6e 5f       	subi	r22, 0xFE	; 254
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	af 4f       	sbci	r26, 0xFF	; 255
    124e:	b1 e0       	ldi	r27, 0x01	; 1
    1250:	3e d0       	rcall	.+124    	; 0x12ce <__ultoa_invert+0x9c>
    1252:	b4 e0       	ldi	r27, 0x04	; 4
    1254:	3c d0       	rcall	.+120    	; 0x12ce <__ultoa_invert+0x9c>
    1256:	67 0f       	add	r22, r23
    1258:	78 1f       	adc	r23, r24
    125a:	89 1f       	adc	r24, r25
    125c:	9a 1f       	adc	r25, r26
    125e:	a1 1d       	adc	r26, r1
    1260:	68 0f       	add	r22, r24
    1262:	79 1f       	adc	r23, r25
    1264:	8a 1f       	adc	r24, r26
    1266:	91 1d       	adc	r25, r1
    1268:	a1 1d       	adc	r26, r1
    126a:	6a 0f       	add	r22, r26
    126c:	71 1d       	adc	r23, r1
    126e:	81 1d       	adc	r24, r1
    1270:	91 1d       	adc	r25, r1
    1272:	a1 1d       	adc	r26, r1
    1274:	20 d0       	rcall	.+64     	; 0x12b6 <__ultoa_invert+0x84>
    1276:	09 f4       	brne	.+2      	; 0x127a <__ultoa_invert+0x48>
    1278:	68 94       	set
    127a:	3f 91       	pop	r19
    127c:	2a e0       	ldi	r18, 0x0A	; 10
    127e:	26 9f       	mul	r18, r22
    1280:	11 24       	eor	r1, r1
    1282:	30 19       	sub	r19, r0
    1284:	30 5d       	subi	r19, 0xD0	; 208
    1286:	31 93       	st	Z+, r19
    1288:	de f6       	brtc	.-74     	; 0x1240 <__ultoa_invert+0xe>
    128a:	cf 01       	movw	r24, r30
    128c:	08 95       	ret
    128e:	46 2f       	mov	r20, r22
    1290:	47 70       	andi	r20, 0x07	; 7
    1292:	40 5d       	subi	r20, 0xD0	; 208
    1294:	41 93       	st	Z+, r20
    1296:	b3 e0       	ldi	r27, 0x03	; 3
    1298:	0f d0       	rcall	.+30     	; 0x12b8 <__ultoa_invert+0x86>
    129a:	c9 f7       	brne	.-14     	; 0x128e <__ultoa_invert+0x5c>
    129c:	f6 cf       	rjmp	.-20     	; 0x128a <__ultoa_invert+0x58>
    129e:	46 2f       	mov	r20, r22
    12a0:	4f 70       	andi	r20, 0x0F	; 15
    12a2:	40 5d       	subi	r20, 0xD0	; 208
    12a4:	4a 33       	cpi	r20, 0x3A	; 58
    12a6:	18 f0       	brcs	.+6      	; 0x12ae <__ultoa_invert+0x7c>
    12a8:	49 5d       	subi	r20, 0xD9	; 217
    12aa:	31 fd       	sbrc	r19, 1
    12ac:	40 52       	subi	r20, 0x20	; 32
    12ae:	41 93       	st	Z+, r20
    12b0:	02 d0       	rcall	.+4      	; 0x12b6 <__ultoa_invert+0x84>
    12b2:	a9 f7       	brne	.-22     	; 0x129e <__ultoa_invert+0x6c>
    12b4:	ea cf       	rjmp	.-44     	; 0x128a <__ultoa_invert+0x58>
    12b6:	b4 e0       	ldi	r27, 0x04	; 4
    12b8:	a6 95       	lsr	r26
    12ba:	97 95       	ror	r25
    12bc:	87 95       	ror	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	ba 95       	dec	r27
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__ultoa_invert+0x86>
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 05       	cpc	r22, r1
    12ca:	71 05       	cpc	r23, r1
    12cc:	08 95       	ret
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
    12d2:	0a 2e       	mov	r0, r26
    12d4:	06 94       	lsr	r0
    12d6:	57 95       	ror	r21
    12d8:	47 95       	ror	r20
    12da:	37 95       	ror	r19
    12dc:	27 95       	ror	r18
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__ultoa_invert+0xa2>
    12e2:	62 0f       	add	r22, r18
    12e4:	73 1f       	adc	r23, r19
    12e6:	84 1f       	adc	r24, r20
    12e8:	95 1f       	adc	r25, r21
    12ea:	a0 1d       	adc	r26, r0
    12ec:	08 95       	ret

000012ee <_exit>:
    12ee:	f8 94       	cli

000012f0 <__stop_program>:
    12f0:	ff cf       	rjmp	.-2      	; 0x12f0 <__stop_program>
